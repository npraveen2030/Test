


===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Service Pricing Layout</title>

  <!-- Bootstrap 5 CDN -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">

  <style>
    .controls-bar {
      background-color: #cce0f5; /* Light blue background */
      padding: 10px;
      border-radius: 5px;
      margin-bottom: 15px;
    }
    .controls-bar .form-check {
      margin-right: 20px;
    }
    .controls-bar .btn {
      margin-right: 10px;
    }
    .custom-table th, .custom-table td {
      vertical-align: middle;
      text-align: center;
    }
    .custom-table {
      background-color: #f9f9f9;
    }
  </style>

</head>
<body class="p-4">

  <!-- Controls bar -->
  <div class="controls-bar d-flex align-items-center flex-wrap">
    <div class="form-check me-3">
      <input class="form-check-input" type="checkbox" id="soldProductsOnly">
      <label class="form-check-label" for="soldProductsOnly">
        Sold Products Only
      </label>
    </div>

    <div class="form-check me-3">
      <input class="form-check-input" type="checkbox" id="showCompetitorPrice">
      <label class="form-check-label" for="showCompetitorPrice">
        Show Competitor Price
      </label>
    </div>

    <button class="btn btn-outline-primary">Add Service</button>
    <button class="btn btn-outline-primary">Reset To Initial Value</button>
    <button class="btn btn-outline-primary">Print</button>
    <button class="btn btn-primary">Update Unit Pricing</button>
  </div>

  <!-- Table -->
  <table class="table table-bordered custom-table">
    <thead class="table-light">
      <tr>
        <th>Products</th>
        <th>Sub Product Name</th>
        <th>Account</th>
        <th>Standard Price</th>
        <th>Volume</th>
        <th>Unit Price</th>
        <th>Discount %</th>
        <th>Exception Fees</th>
        <th>Fee Income</th>
        <th>Element ID</th>
        <th>ARP Code</th>
        <th>Action</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>
          <select class="form-select">
            <option>All Products</option>
          </select>
        </td>
        <td>Deposit Assessment</td>
        <td>123</td>
        <td>0.25000</td>
        <td>0.010</td>
        <td>
          <select class="form-select">
            <option>0.2500</option>
          </select>
        </td>
        <td>0.25000</td>
        <td>0.25000</td>
        <td>0.25000</td>
        <td>0.25000</td>
        <td>0.25000</td>
        <td><a href="#">✖</a></td>
      </tr>
    </tbody>
  </table>

</body>
</html>

===========================================================================================================
<div class="d-flex align-items-center gap-2 flex-wrap text-center">
    <input type="checkbox" class="form-check-input" id="myCheckbox">
    <label class="form-check-label me-3" for="myCheckbox">Checkbox</label>

    <button class="btn btn-primary">Add Service</button>
    <button class="btn btn-success">Update Unit Pricing</button>
    <button class="btn btn-warning text-dark">Reset To Initial Values</button>
    <button class="btn btn-info text-white">Print</button>
    <button class="btn btn-danger">Undo Current Changes</button>
  </div>
===========================================================================================================
@inherits AnalysisBase
@inject IJSRuntime JS

<h3>Analysis Report</h3>
<button class="export-button" @onclick="ExportToPdf">Export to PDF</button>

using Microsoft.AspNetCore.Components;
using Microsoft.JSInterop;
using GrapeCity.Documents.Pdf;
using GrapeCity.Documents.Text;
using System.Drawing;

public partial class AnalysisBase : ComponentBase
{
    [Inject] public IJSRuntime JS { get; set; } = default!;

    protected async Task ExportToPdf()
    {
        var pdfBytes = GenerateAnalysisPdf();
        var base64 = Convert.ToBase64String(pdfBytes);
        await JS.InvokeVoidAsync("downloadFile", "AnalysisReport.pdf", base64);
    }

    private byte[] GenerateAnalysisPdf()
    {
        var doc = new GcPdfDocument();
        var page = doc.NewPage();

        var format = new TextFormat
        {
            Font = StandardFonts.Helvetica,
            FontSize = 14,
        };

        page.Graphics.DrawString("📊 Analysis Report", new TextFormat { Font = StandardFonts.HelveticaBold, FontSize = 18 }, new PointF(72, 72));
        page.Graphics.DrawString("Generated on: " + DateTime.Now.ToString("f"), format, new PointF(72, 100));
        page.Graphics.DrawString("• Item 1: Value A", format, new PointF(72, 130));
        page.Graphics.DrawString("• Item 2: Value B", format, new PointF(72, 150));

        using var ms = new MemoryStream();
        doc.Save(ms);
        return ms.ToArray();
    }
}
.export-button {
    background-color: #4caf50;
    color: white;
    padding: 10px 16px;
    font-size: 14px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}
<script>
    window.downloadFile = (fileName, base64Data) => {
        const link = document.createElement('a');
        link.download = fileName;
        link.href = 'data:application/pdf;base64,' + base64Data;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };
</script>
export function downloadFile(fileName, base64Data) {
    const link = document.createElement('a');
    link.download = fileName;
    link.href = 'data:application/pdf;base64,' + base64Data;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
}
private IJSObjectReference? jsModule;

protected override async Task OnInitializedAsync()
{
    jsModule = await JS.InvokeAsync<IJSObjectReference>("import", "/js/download.js");
}

protected async Task ExportToPdf()
{
    var pdfBytes = GenerateAnalysisPdf();
    var base64 = Convert.ToBase64String(pdfBytes);
    if (jsModule != null)
    {
        await jsModule.InvokeVoidAsync("downloadFile", "AnalysisReport.pdf", base64);
    }
}

===========================================================================================================
/* This helps if styles are not scoped correctly */
.hide-header-grid .rz-datagrid-thead {
    display: none !important;
}

===========================================================================================================
using System;
using System.Reflection;

public class Sample
{
    public string Name { get; set; }
    public int Age { get; set; }
    public decimal Salary { get; set; }
}

class Program
{
    static void Main()
    {
        Type type = typeof(Sample);
        PropertyInfo[] properties = type.GetProperties();

        foreach (var prop in properties)
        {
            Type propType = prop.PropertyType;

            if (propType == typeof(string))
            {
                Console.WriteLine($"{prop.Name} is a string");
            }
            else if (propType == typeof(int))
            {
                Console.WriteLine($"{prop.Name} is an int");
            }
            else if (propType == typeof(decimal))
            {
                Console.WriteLine($"{prop.Name} is a decimal");
            }
            else
            {
                Console.WriteLine($"{prop.Name} is of type {propType.Name}");
            }
        }
    }
}

===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
.link-button {
            background: none;
            border: none;
            color: #007bff;
            text-decoration: underline;
            cursor: pointer;
            font-size: 16px;
            padding: 0;
        }

===========================================================================================================
using System;
using System.Collections.Generic;
using System.Linq;

public class InteresetExpensesData
{
    public int Id { get; set; }
    public int ModelId { get; set; }
    public int AccountType { get; set; }
    public decimal AvgColBal { get; set; }
    public bool Collateralized { get; set; }
    public string InterestType { get; set; }
    public decimal CurrentIntRate { get; set; }
    public decimal ExceptionIntRate { get; set; }
    public string BalanceName { get; set; }
    public decimal InterestRat { get; set; }
    public DateTime AppliedExpiration { get; set; }
    public decimal FdicCost { get; set; }
    public decimal FdicRate { get; set; }
    public bool UseFedFunds { get; set; }
    public decimal FedFundsRate { get; set; }
    public string AccountNumber { get; set; }
    public decimal ExceptionIntRateBonus { get; set; }
    public decimal CurrentRate { get; set; }
    public DateTime RateExpiration { get; set; }
    public bool DerivedFromHogan { get; set; }
    public int BonusType { get; set; }
    public int CampaignId { get; set; }
    public string ProductGroup { get; set; }
    public string EIEligibility { get; set; }
    public string EIEligibilityMsg { get; set; }
    public int MaxBalance { get; set; }
    public decimal MaxAppliedInterestRate { get; set; }
    public int Include { get; set; }

    // Dummy data generator
    public static List<InteresetExpensesData> GetDummyData(int modelId)
    {
        var dummyData = Enumerable.Range(1, 5).Select(i => new InteresetExpensesData
        {
            Id = i,
            ModelId = modelId,
            AccountType = i % 3,
            AvgColBal = 10000 + i * 1000,
            Collateralized = i % 2 == 0,
            InterestType = "Fixed",
            CurrentIntRate = 4.5m + i,
            ExceptionIntRate = 4.0m + i,
            BalanceName = $"Balance {i}",
            InterestRat = 3.5m + i,
            AppliedExpiration = DateTime.Today.AddMonths(i),
            FdicCost = 12.34m + i,
            FdicRate = 0.25m + i,
            UseFedFunds = i % 2 != 0,
            FedFundsRate = 5.0m + i,
            AccountNumber = $"ACC00{i}",
            ExceptionIntRateBonus = 0.1m * i,
            CurrentRate = 4.25m + i,
            RateExpiration = DateTime.Today.AddMonths(i * 2),
            DerivedFromHogan = true,
            BonusType = i % 2,
            CampaignId = 1000 + i,
            ProductGroup = "Business",
            EIEligibility = "Eligible",
            EIEligibilityMsg = "Qualified",
            MaxBalance = 50000 + i * 1000,
            MaxAppliedInterestRate = 4.0m + i,
            Include = 1
        }).ToList();

        return dummyData;
    }
}

// Example usage
public class Program
{
    public static void Main()
    {
        int modelId = 100823;
        var list = InteresetExpensesData.GetDummyData(modelId);
        
        // Output for demo
        foreach (var item in list)
        {
            Console.WriteLine($"{item.Id} - {item.AccountNumber} - {item.CurrentIntRate}%");
        }
    }
}

===========================================================================================================
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Outer Table with Nested Table</title>
  <style>
    /* Outer Table Styling */
    .outer-table {
      width: 100%;
      border-collapse: collapse;
      border: 2px solid #444;
      font-family: Arial, sans-serif;
      margin-top: 30px;
    }

    .outer-table th, .outer-table td {
      border: 1px solid #aaa;
      padding: 10px;
      text-align: left;
      background-color: #f9f9f9;
    }

    .outer-table th:nth-child(1),
    .outer-table td:nth-child(1) {
      width: 24%;
    }

    .outer-table th:nth-child(n+2),
    .outer-table td:nth-child(n+2) {
      width: 19%;
    }

    /* Inner Table Styling */
    .inner-table {
      width: 100%;
      border-collapse: collapse;
      background-color: #fff;
      margin-top: 10px;
    }

    .inner-table th, .inner-table td {
      border: 1px dashed #666;
      padding: 6px;
      background-color: #f0f8ff;
    }

    .inner-table th {
      background-color: #cce5ff;
      font-weight: bold;
    }
  </style>
</head>
<body>

  <table class="outer-table">
    <thead>
      <tr>
        <th>Account Name</th>
        <th>Region</th>
        <th>Status</th>
        <th>Sales</th>
        <th>Manager</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>Alpha Corporation</td>
        <td>North</td>
        <td>Active</td>
        <td>$12,500</td>
        <td>John Doe</td>
      </tr>
      <tr>
        <td colspan="5">
          <strong>Details:</strong>
          <table class="inner-table">
            <thead>
              <tr>
                <th>Product</th>
                <th>Unit Price</th>
                <th>Quantity</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>Widget A</td>
                <td>$10</td>
                <td>100</td>
              </tr>
              <tr>
                <td>Widget B</td>
                <td>$15</td>
                <td>200</td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
    </tbody>
  </table>

</body>
</html>

===========================================================================================================
  .warning-box {
      display: flex;
      align-items: center;
      background-color: #fff3cd;
      color: #856404;
      border: 1px solid #ffeeba;
      border-radius: 4px;
      padding: 10px 15px;
      margin: 20px 0;
      font-family: Arial, sans-serif;
    }

    .warning-icon {
      font-size: 20px;
      margin-right: 10px;
    }

    .warning-text {
      font-size: 14px;
    }<div class="warning-box">
    <div class="warning-icon">⚠️</div>
    <div class="warning-text">This is a warning message. Please check your inputs.</div>
  </div>
===========================================================================================================
.container {
  border: 1px solid #ccc;
  background-color: #fff;
  padding: 10px;
}

.header {
  background-color: #d9e9f7;
  padding: 10px;
  font-weight: bold;
  border-bottom: 1px solid #ccc;
}

.main-content {
  display: flex;
  padding: 15px;
  gap: 20px;
}

.table-section {
  width: 30%;
}

table {
  width: 100%;
  border-collapse: collapse;
  border: 1px solid #ccc;
}

th {
  background-color: #eee;
  padding: 8px;
  text-align: center;
  border: 1px solid #ccc;
}

td {
  padding: 8px;
  border: 1px solid #ccc;
  text-align: center;
}

.form-section {
  width: 45%;
}

.form-section h4 {
  margin: 0 0 10px 0;
  font-weight: bold;
}

.form-group {
  display: flex;
  align-items: center;
  margin-bottom: 10px;
}

.form-group label {
  font-size: 14px;
  width: 220px;
  margin-right: 10px;
}

.form-group input[type="date"] {
  flex: 1;
  padding: 6px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

.view-button {
  margin-top: 10px;
  padding: 6px 12px;
  background-color: #f0f0f0;
  border: 1px solid #ccc;
  cursor: pointer;
}

.right-section {
  width: 25%;
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  justify-content: space-between;
}

.propose-button {
  padding: 8px 14px;
  background-color: #ccc;
  border: none;
  border-radius: 4px;
  cursor: not-allowed;
  opacity: 0.6;
}

.error-message {
  color: red;
  font-weight: bold;
  margin-top: 10px;
  text-align: right;
}

@page "/new-customer-model"

<div class="container">
  <div class="header">Report Search</div>
  <div class="main-content">
    <!-- Left: Table -->
    <div class="table-section">
      <table>
        <thead>
          <tr>
            <th colspan="2">Key Accounts Included in Model</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>123</td>
            <td>Sample Account</td>
          </tr>
        </tbody>
      </table>
    </div>

    <!-- Middle: Form Section -->
    <div class="form-section">
      <h4>New Customer Model UX - @DateTime.Today.ToString("MM/dd/yyyy")</h4>
      <div class="form-group">
        <label for="effectiveDate">Proposed Pricing Effective Date</label>
        <input type="date" id="effectiveDate" @bind="effectiveDate" class="form-control" />
      </div>
      <div class="form-group">
        <label for="expirationDate">Proposed Pricing Expiration Date</label>
        <input type="date" id="expirationDate" @bind="expirationDate" class="form-control" />
      </div>
      <button class="view-button" @onclick="ViewProposal">View Proposal Data</button>
    </div>

    <!-- Right: Button and Error -->
    <div class="right-section">
      <button class="propose-button" disabled>Propose Approval</button>
      <div class="error-message">Not Enough Information To Determine Tier</div>
    </div>
  </div>
</div>

@code {
  private DateTime effectiveDate = new DateTime(2024, 8, 1);
  private DateTime expirationDate = new DateTime(2025, 7, 31);

  private void ViewProposal()
  {
    // You can add logic to handle the button click
    Console.WriteLine($"Effective: {effectiveDate}, Expiration: {expirationDate}");
  }
}

===========================================================================================================
@code {
    bool isExpanded = true;
}

<RadzenPanel Style="border: 1px solid lightgray;">
    <HeaderTemplate>
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <span><b>My Panel Title</b></span>
            <RadzenButton Icon=@(isExpanded ? "expand_less" : "expand_more") Size="Small" Click="@(() => isExpanded = !isExpanded)" />
        </div>
    </HeaderTemplate>
    <ChildContent>
        @if (isExpanded)
        {
            <p>This is the content that can be collapsed.</p>
        }
    </ChildContent>
</RadzenPanel>

===========================================================================================================
@using Radzen;
@using Radzen.Blazor;
@using System.Collections.Generic;
@using System.Linq;

@* Declare the CheckboxItem class *@
@code {
    public class CheckboxItem
    {
        public int Id { get; set; }
        public string Text { get; set; } = "";
        public bool IsSelected { get; set; }
    }
}

<div class="p-6 space-y-4">
    <h2 class="text-2xl font-bold text-gray-800 dark:text-gray-200">RadzenCheckBox Demo (Blazor)</h2>
    <p class="text-gray-600 dark:text-gray-400">
        This example demonstrates using RadzenCheckBox with a custom data structure in Blazor.
    </p>

    <div class="space-y-2">
        @foreach (var item in items)
        {
            <div class="flex items-center gap-2">
                <RadzenCheckBox @bind-Value="item.IsSelected"
                                @onchange="@((bool value) => HandleChange(value, item))"
                                Name="@($"item-{item.Id}")"
                                Class="mr-2" />
                <label for="@($"item-{item.Id}")" class="text-gray-700 dark:text-gray-300">@item.Text</label>
            </div>
        }
    </div>
     <RadzenButton Click="LogSelectedItems" Text="Get Selected Items" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded" />
</div>

@* Code block for component logic *@
@code {
    private List<CheckboxItem> items = new List<CheckboxItem>
    {
        new CheckboxItem { Id = 1, Text = "Item 1", IsSelected = false },
        new CheckboxItem { Id = 2, Text = "Item 2", IsSelected = true },
        new CheckboxItem { Id = 3, Text = "Item 3", IsSelected = false },
    };

    private void HandleChange(bool value, CheckboxItem item)
    {
        // Find the item in the list and update its IsSelected property
        var itemToUpdate = items.FirstOrDefault(i => i.Id == item.Id);
        if (itemToUpdate != null)
        {
            itemToUpdate.IsSelected = value;
        }
    }

    private void LogSelectedItems()
    {
        var selectedItems = items.Where(item => item.IsSelected).ToList();
        Console.WriteLine("Selected Items:");
        foreach (var selectedItem in selectedItems)
        {
            Console.WriteLine($"- {selectedItem.Text}");
        }
        //Use JS interop to display an alert.
        string message = $"Selected Items: {string.Join(", ", selectedItems.Select(i => i.Text))}";
        await JSRuntime.InvokeVoidAsync("alert", message);
    }
}

===========================================================================================================
using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace YourNamespace.Models
{
    [Table("CIFVTPAD")]
    public class Cifvtpad
    {
        [Key]
        [Column("TPAD ACCT_NUM")]
        [StringLength(16)]
        public string TpadAcctNum { get; set; }

        [Required]
        [Column("TPAD_PERIOD_ID")]
        [StringLength(5)]
        public string TpadPeriodId { get; set; }

        [Required]
        [Column("TPAD PERIOD_DATE")]
        public DateTime TpadPeriodDate { get; set; }

        [Required]
        [Column("TPAD_EXCEPTION_SET")]
        [StringLength(8)]
        public string TpadExceptionSet { get; set; }

        [Required]
        [Column("TPAD_CHRG_CLASS")]
        [StringLength(2)]
        public string TpadChrgClass { get; set; }

        [Required]
        [Column("TPAD_CR_RATE")]
        public decimal TpadCrRate { get; set; }

        [Required]
        [Column("TPAD_OD_RATE")]
        public decimal TpadOdRate { get; set; }

        [Required]
        [Column("TPAD_AVG_CURR_BAL")]
        public decimal TpadAvgCurrBal { get; set; }

        [Required]
        [Column("TPAD AVG_COLL_BAL")]
        public decimal TpadAvgCollBal { get; set; }

        [Required]
        [Column("TPAD_POS_COLL_BAL")]
        public decimal TpadPosCollBal { get; set; }

        [Required]
        [Column("TPAD NEG COLL_BAL")]
        public decimal TpadNegCollBal { get; set; }

        [Required]
        [Column("TPAD_FREE_COLL_BAL")]
        public decimal TpadFreeCollBal { get; set; }

        [Required]
        [Column("TPAD RESERVE REQ")]
        public decimal TpadReserveReq { get; set; }

        [Required]
        [Column("TPAD TIMES OD")]
        public decimal TpadTimesOd { get; set; }

        [Required]
        [Column("TPAD_OD PREMIUM")]
        public decimal TpadOdPremium { get; set; }

        [Required]
        [Column("TPAD SRVC_RENDERED")]
        public decimal TpadSrvcRendered { get; set; }

        [Required]
        [Column("TPAD_PRFT_LOSS_AMT")]
        public decimal TpadPrftLossAmt { get; set; }

        [Required]
        [Column("TPAD FEES PAID")]
        public decimal TpadFeesPaid { get; set; }

        [Required]
        [Column("TPAD_THIRD PTY_CHG")]
        public decimal TpadThirdPtyChg { get; set; }
    }
}

===========================================================================================================

using Microsoft.EntityFrameworkCore;
using YourNamespace;

var builder = WebApplication.CreateBuilder(args);

// Add DbContext with connection pooling
builder.Services.AddDbContextPool<DB3Entities>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

var app = builder.Build();

// Optional: Add app configuration here

app.Run();

=================================
{
  "ConnectionStrings": {
    "DefaultConnection": "Server=your_server;Database=your_database;User Id=your_user;Password=your_password;"
  }
}
=================================
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace YourNamespace
{
    [Table("CIFVTBAD")]
    public class Cifvtbad
    {
        [Key]
        [Column("TBAD ACCT NUM")]
        [StringLength(16)]
        public string TbadAcctNum { get; set; }

        [Required]
        [Column("TBAD MAST ACCT NUM")]
        [StringLength(16)]
        public string TbadMastAcctNum { get; set; }

        [Required]
        [Column("TBAD PRODUCT TYPE")]
        [StringLength(2)]
        public string TbadProductType { get; set; }

        [Required]
        [Column("TBAD STATUS")]
        [StringLength(2)]
        public string TbadStatus { get; set; }

        [Required]
        [Column("TBAD DATE OPN CLS")]
        [StringLength(7)]
        public string TbadDateOpnCls { get; set; }

        [Required]
        [Column("TBAD SHORT NAME")]
        [StringLength(25)]
        public string TbadShortName { get; set; }

        [Required]
        [Column("TBAD COST CENTER")]
        [StringLength(7)]
        public string TbadCostCenter { get; set; }

        [Required]
        [Column("TBAD_BRANCH")]
        [StringLength(5)]
        public string TbadBranch { get; set; }

        [Required]
        [Column("TBAD OFFICER")]
        [StringLength(5)]
        public string TbadOfficer { get; set; }

        [Required]
        [Column("TBAD ANAL SCHD")]
        [StringLength(2)]
        public string TbadAnalSchd { get; set; }

        [Required]
        [Column("TBAD_PACKAGE CODE")]
        [StringLength(6)]
        public string TbadPackageCode { get; set; }
    }

    public class DB3Entities : DbContext
    {
        public DB3Entities(DbContextOptions<DB3Entities> options) : base(options)
        {
        }

        public DbSet<Cifvtbad> Cifvtbad { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Cifvtbad>()
                .HasKey(e => e.TbadAcctNum); // Assuming it's the primary key

            base.OnModelCreating(modelBuilder);
        }
    }
}

=================================

=================================

=================================

=================================

=================================

=================================

=================================

=================================

=================================

=================================

=================================

===========================================================================================================
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Centered Label in Div</title>
  <style>
    .centered-container {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 150px;
      border: 1px solid #ccc;
      background-color: #f9f9f9;
      margin: 50px auto;
      width: 50%;
      border-radius: 8px;
    }

    .centered-container label {
      font-size: 16px;
      font-weight: bold;
    }
  </style>
</head>
<body>

  <div class="centered-container">
    <label for="example">This is a centered label</label>
  </div>

</body>
</html>

===========================================================================================================
<RadzenDataGrid TItem="AdjustedAnalysisDataModel" Data="@gridData" AllowPaging="true">
    <Columns>
        <RadzenDataGridColumnGroup Title="Customer Info">
            <Columns>
                <RadzenDataGridColumn TItem="AdjustedAnalysisDataModel" Property="CustomerName" Title="Customer Name" />
                <RadzenDataGridColumn TItem="AdjustedAnalysisDataModel" Property="NoOfAccount" Title="No Of Accounts" />
            </Columns>
        </RadzenDataGridColumnGroup>

        <RadzenDataGridColumnGroup Title="Balances">
            <Columns>
                <RadzenDataGridColumn TItem="AdjustedAnalysisDataModel" Property="AvgLedgerBalance" Title="Avg Ledger Balance" />
                <RadzenDataGridColumn TItem="AdjustedAnalysisDataModel" Property="AvgCollectedBalance" Title="Avg Collected Balance" />
            </Columns>
        </RadzenDataGridColumnGroup>

        <RadzenDataGridColumnGroup Title="ECR Info">
            <Columns>
                <RadzenDataGridColumn TItem="AdjustedAnalysisDataModel" Property="Ecr" Title="ECR" />
                <RadzenDataGridColumn TItem="AdjustedAnalysisDataModel" Property="NegativeCollectedRate" Title="Negative Collected Rate" />
            </Columns>
        </RadzenDataGridColumnGroup>
    </Columns>
</RadzenDataGrid>

===========================================================================================================
void OnExceptionSetNameChanged(object value, AdjustedAnalysisDataModel data)
{
    var selected = value?.ToString();
    data.ExceptionSetName = selected;

    // You can set related fields here
    data.ExceptionExpiration = DateTime.Now.AddDays(30).ToString("yyyy-MM-dd"); // Example logic
}
===========================================================================================================
public class ExceptionName
{
    public string Name { get; set; }
}

public List<ExceptionName> ExceptionNames = new()
{
    new ExceptionName { Name = "Praveen1" },
    new ExceptionName { Name = "Praveen2" },
    new ExceptionName { Name = "Praveen3" }
};


===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
<RadzenDataGridColumn TItem="AdjustedAnalysisDataModel" Property="ExceptionSetName" Title="Exception Set Name">
    <Template Context="data">
        <RadzenDropDown 
            Value="@data.ExceptionSetName"
            Data="@ExceptionNames" 
            TextProperty="Name" 
            ValueProperty="Name" 
            Style="width:100%" 
            Change="@((args) => OnExceptionSetNameChanged(args, data))" />
    </Template>
</RadzenDataGridColumn>


===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
@page "/adjusted-analysis"
@using System.Linq
@using System.Collections.Generic

@code {
    public class AdjustedAnalysisDataModel
    {
        public decimal CustomerName { get; set; }
        public decimal NoOfAccount { get; set; }
        public string Keyaccounts { get; set; }
        public bool Include { get; set; }
        public int ID { get; set; }
        public string BillingMethod { get; set; }
        public decimal Ecr { get; set; }
        public decimal NegativeCollectedRate { get; set; }
        public decimal PostiveCollectedBalance { get; set; }
        public decimal NegativeCollectedBalance { get; set; }
        public decimal AvgLedgerBalance { get; set; }
        public decimal AvgCollectedBalance { get; set; }
        public string ExceptionSetName { get; set; }
        public string ExceptionExpiration { get; set; }
        public bool UseStandardEcr { get; set; }
        public bool EcrOnlyChange { get; set; }
        public string RateChangeType { get; set; }
    }

    List<AdjustedAnalysisDataModel> AdjustedData = Enumerable.Range(1, 5).Select(i => new AdjustedAnalysisDataModel
    {
        CustomerName = 1000 + i,
        NoOfAccount = 10 + i,
        Keyaccounts = $"Key{i}",
        Include = i % 2 == 0,
        ID = 100823,
        BillingMethod = billingMethods[i % billingMethods.Count],
        Ecr = 0.25m + i,
        NegativeCollectedRate = 0.1m * i,
        PostiveCollectedBalance = 2000 + i,
        NegativeCollectedBalance = 500 + i,
        AvgLedgerBalance = 1500 + i,
        AvgCollectedBalance = 1600 + i,
        ExceptionSetName = $"Exception{i}",
        ExceptionExpiration = DateTime.Now.AddDays(i).ToString("yyyy-MM-dd"),
        UseStandardEcr = i % 2 == 0,
        EcrOnlyChange = i % 3 == 0,
        RateChangeType = rateChangeTypes[i % rateChangeTypes.Count]
    }).ToList();

    List<string> billingMethods = new()
    {
        "Monthly, Direct Debit", "Monthly, Billed", "Quarterly, Direct Debit",
        "Quarterly, Billed", "Semi, Direct Debit", "Semi, Billed",
        "Yearly, Direct Debit", "Yearly, Billed", "Waived"
    };

    List<string> rateChangeTypes = new() { "NC", "ADD", "CHG", "RMV" };
}

<RadzenDataGrid TItem="AdjustedAnalysisDataModel" Data="@AdjustedData" ShowPagingSummary="true" PageSize="5" AllowFiltering="true" AllowSorting="true" AllowPaging="true" class="w-full">
    <Columns>
        <RadzenDataGridColumn TItem="AdjustedAnalysisDataModel" Width="50px">
            <Template Context="data">
                <RadzenCheckBox TriState="false" Value="@data.Include" />
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="AdjustedAnalysisDataModel" Property="Keyaccounts" Title="Key Account" />
        <RadzenDataGridColumn TItem="AdjustedAnalysisDataModel" Property="CustomerName" Title="Customer Name" />

        <RadzenDataGridColumn TItem="AdjustedAnalysisDataModel" Property="RateChangeType" Title="Rate Change Type">
            <EditTemplate Context="data">
                <RadzenDropDown @bind-Value="data.RateChangeType" Data="@rateChangeTypes" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="AdjustedAnalysisDataModel" Property="BillingMethod" Title="Billing Method">
            <EditTemplate Context="data">
                <RadzenDropDown @bind-Value="data.BillingMethod" Data="@billingMethods" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="AdjustedAnalysisDataModel" Property="Ecr" Title="ECR">
            <EditTemplate Context="data">
                <RadzenTextBox @bind-Value="data.Ecr" Style="width:100%" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="AdjustedAnalysisDataModel" Property="NegativeCollectedRate" Title="Neg Rate">
            <EditTemplate Context="data">
                <RadzenTextBox @bind-Value="data.NegativeCollectedRate" Style="width:100%" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="AdjustedAnalysisDataModel" Property="AvgLedgerBalance" Title="Avg Ledger Balance">
            <EditTemplate Context="data">
                <RadzenTextBox @bind-Value="data.AvgLedgerBalance" Style="width:100%" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="AdjustedAnalysisDataModel" Property="AvgCollectedBalance" Title="Avg Collected Balance">
            <EditTemplate Context="data">
                <RadzenTextBox @bind-Value="data.AvgCollectedBalance" Style="width:100%" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="AdjustedAnalysisDataModel" Property="PostiveCollectedBalance" Title="Pos Collected Balance">
            <EditTemplate Context="data">
                <RadzenTextBox @bind-Value="data.PostiveCollectedBalance" Style="width:100%" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="AdjustedAnalysisDataModel" Property="NegativeCollectedBalance" Title="Neg Collected Balance">
            <EditTemplate Context="data">
                <RadzenTextBox @bind-Value="data.NegativeCollectedBalance" Style="width:100%" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="AdjustedAnalysisDataModel" Property="ExceptionSetName" Title="Exception Set Name">
            <EditTemplate Context="data">
                <RadzenTextBox @bind-Value="data.ExceptionSetName" Style="width:100%" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="AdjustedAnalysisDataModel" Property="ExceptionExpiration" Title="Exception Expiration">
            <EditTemplate Context="data">
                <RadzenTextBox @bind-Value="data.ExceptionExpiration" ReadOnly="true" Style="width:100%" />
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>
