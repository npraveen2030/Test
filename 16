

===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
function formatDecimalInput(el, maxIntDigits = 16, maxDecDigits = 2) {
    // 1 ‚Äì sanitise
    let raw = el.value.replace(/[^0-9.]/g, '');

    // 2 ‚Äì collapse extra dots
    let firstDot = raw.indexOf('.');
    if (firstDot !== -1) {
        raw = raw.slice(0, firstDot + 1) + raw.slice(firstDot + 1).replace(/\./g, '');
    }

    // 3 ‚Äì split
    let [integerPart, decimalPart = ''] = raw.split('.');

    // 4 ‚Äì trim
    integerPart = integerPart.substring(0, maxIntDigits);
    decimalPart = decimalPart.substring(0, maxDecDigits);

    // 5 ‚Äì re-assemble
    const hasTrailingDot = raw.endsWith('.') && decimalPart.length === 0;

    if (decimalPart.length) {
        el.value = ${integerPart}.${decimalPart};      // ‚Äú123.45‚Äù
    } else if (hasTrailingDot) {
        el.value = ${integerPart}.;                    // keep ‚Äú123.‚Äù while user is mid-type
    } else {
        el.value = integerPart;                          // just ‚Äú123‚Äù
    }
}
===========================================================================================================
<script>
    function convertToDecimal(el, totalDigits, decimalPlaces) {
        let raw = el.value.replace(/[^0-9]/g, ''); // Keep only numbers

        let integerPart = raw.substring(0, totalDigits);
        let decimalPart = raw.substring(totalDigits, totalDigits + decimalPlaces);

        if (decimalPart.length > 0) {
            el.value = integerPart + "." + decimalPart;
        } else {
            el.value = integerPart;
        }
    } function formatDecimalInput(el, totalDigits, decimalPlaces) {
        let raw = el.value.replace(/[^0-9]/g, ''); // Allow only digits

        let integerPart = raw.substring(0, totalDigits);
        let decimalPart = raw.substring(totalDigits, totalDigits + decimalPlaces);

        if (decimalPart.length > 0) {
            el.value = integerPart + "." + decimalPart;
        } else {
            el.value = integerPart;
        }
    }
</script>


<RadzenNumeric @bind-Value="@numberValue"
               TValue="int?"
               Placeholder="Enter up to 8 digits"
               InputAttributes="@inputAttributes"
               Style="width:200px" />

<InputText @bind-Value="@decimalText"
           maxlength="19"
           oninput="convertToDecimal(this, 13, 5)"
           Placeholder="Enter number (13 total digits, 5 decimals)"
           style="width:220px;" />
<RadzenNumeric @bind-Value="@decimalValue"
               TValue="decimal?"
               Step="0.00001"
               Placeholder="Enter number (13 total digits, 5 decimals)"
               InputAttributes="@decimalAttributes"
               Style="width:220px" />

    int? numberValue { get; set; }

    Dictionary<string, object> inputAttributes = new()
{
    { "maxlength", "8" },
    { "oninput", "this.value = this.value.replace(/[^0-9]/g, '').slice(0,8);" }
}; string decimalText { get; set; }

    decimal? decimalValue { get; set; }

    Dictionary<string, object> decimalAttributes = new()
{
    { "oninput", "formatDecimalInput(this, 13, 5);" }
};
===========================================================================================================

<RadzenNumeric @bind-Value="@decimalValue"
               TValue="decimal?"
               Step="0.00001"
               Placeholder="Enter up to 13 total digits, 5 decimals"
               InputAttributes="@decimalAttributes"
               Style="width:220px" />
			   
 decimal? decimalValue { get; set; }

    Dictionary<string, object> decimalAttributes = new()
    {
        { "maxlength", "19" }, // Total max characters with dot and decimals
        { "oninput", "this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\\..*)\\./g, '$1'); limitDecimal(this, 13, 5);" }
    };


===========================================================================================================
<RadzenNumeric @bind-Value="@numberValue"
               TValue="int?"
               Placeholder="Enter up to 8 digits"
               InputAttributes="@inputAttributes"
               Style="width:200px" />
			       int? numberValue { get; set; }

    Dictionary<string, object> inputAttributes = new()
{
    { "maxlength", "8" },
    { "oninput", "this.value = this.value.replace(/[^0-9]/g, '').slice(0,8);" }
};

===========================================================================================================
<InputText @bind-Value="@numberText"
           maxlength="8"
           oninput="this.value = this.value.replace(/[^0-9]/g, '')"
           Placeholder="Enter up to 8 digits"
           style="width:200px;" />
<InputText @bind-Value="@decimalText"
           maxlength="19" 
           oninput="this.value = this.value.replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1'); limitDecimal(this, 13, 5);"
           Placeholder="Enter number (max 13 digits, 5 decimals)"
           style="width:220px;" />

===========================================================================================================
@if (showConfirm)
{
    <div class="modal-overlay">
        <div class="modal-box">
            <p>@confirmMessage</p>
            <button @onclick="ConfirmYes">Yes</button>
            <button @onclick="ConfirmNo">No</button>
        </div>
    </div>
}

===========================================================================================================
<table class="table">
    <thead>
        <tr>
            <th>Key Account</th>
            <th>Customer Name</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in YourDataList)
        {
            <tr>
                <td>@item.KeyAccount</td>
                <td>@item.CustomerName</td>
            </tr>
        }
    </tbody>
</table>

===========================================================================================================
<style>
  .form-row {
    display: flex;
    justify-content: flex-start;
    align-items: flex-start;
    flex-wrap: wrap;
    gap: 80px;
    padding: 10px;
  }

  .left-controls,
  .right-controls {
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
  }

  .form-group {
    display: flex;
    align-items: center;
    gap: 6px;
  }
 .form-row .left-controls .form-group:nth-child(1) label {
    width: 160px; /* üëà fixed width for labels */
    white-space: nowrap;
    font-weight: 500;
    text-align: right;
    background-color: red;
  }
 .form-row .left-controls .form-group:nth-child(2) label  {
    width: 120px; /* üëà fixed width for labels */
    white-space: nowrap;
    font-weight: 500;
    text-align: right;
    background-color: yellow;
  }

  select,
  input[type="datetime-local"] {
    padding: 5px;
    width: 120px;
  }

  input[type="checkbox"] {
    transform: scale(1.2);
    margin-left: 5px;
  }
</style>

<div class="col-12">
  <div class="form-row">
    <!-- Left aligned controls -->
    <div class="left-controls">
      <div class="form-group">
        <label>Proposed Pricing Waved:</label>
        <select>
          <option>Product 1</option>
          <option>Product 2</option>
        </select>
      </div>

      <div class="form-group">
        <label>Compaign Pricing:</label>
        <select>
          <option>Category A</option>
          <option>Category B</option>
        </select>
      </div>
    </div>

    <!-- Right aligned controls -->
    <div class="right-controls">
      <div class="form-group">
        <label>Start Date:</label>
        <input type="datetime-local" />
      </div>

      <div class="form-group">
        <label>End Date:</label>
        <input type="datetime-local" />
      </div>

      <div class="form-group">
        <label for="chkValid">Is Valid</label>
        <input type="checkbox" id="chkValid" />
      </div>
    </div>
  </div>
</div>

<div class="col-12">
  <div class="form-row">
    <!-- Left aligned controls -->
    <div class="left-controls">
      <div class="form-group">
        <label>Current Pricing Waved:</label>
        <select>
          <option>Product 1</option>
          <option>Product 2</option>
        </select>
      </div>

      <div class="form-group">
        <label>Contract Pricing:</label>
        <select>
          <option>Category A</option>
          <option>Category B</option>
        </select>
      </div>
    </div>

    <!-- Right aligned controls -->
    <div class="right-controls">
      <div class="form-group">
        <label>Start Date:</label>
        <input type="datetime-local" />
      </div>

      <div class="form-group">
        <label>End Date:</label>
        <input type="datetime-local" />
      </div>

      <div class="form-group">
        <label for="chkValid2">Is Valid</label>
        <input type="checkbox" id="chkValid2" />
      </div>
    </div>
  </div>
</div>

===========================================================================================================
@page "/fixegrid" 

@inject NavigationManager NavigationManager

<h3>Shopping Cart</h3>

<RadzenDataGrid @ref="grid"
                Data="@cartItems"
                TItem="Cart"
                class="fixed-header-grid"
                RowHeight="40"
                Style="height: 400px;">
    <Columns>
        <RadzenDataGridColumn TItem="Cart" Property="Book.Title" Title="Title" />
        <RadzenDataGridColumn TItem="Cart" Property="Book.Price" Title="Price (‚Çπ)" />
        <RadzenDataGridColumn TItem="Cart" Property="Quantity" Title="Quantity" />
        <RadzenDataGridColumn TItem="Cart" Title="Total (‚Çπ)">
            <Template Context="item">
                ‚Çπ@(item.Book.Price * item.Quantity)
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    private RadzenDataGrid<Cart> grid;

    private List<Cart> cartItems = new()
    {
        new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }, new Cart
        {
            Book = new Book { Title = "Blazor in Action", Price = 500, ImageUrl = "book1.jpg" },
            Quantity = 2
        },
        new Cart
        {
            Book = new Book { Title = "ASP.NET Core Fundamentals", Price = 750, ImageUrl = "book2.jpg" },
            Quantity = 1
        }
    };

    public class Cart
    {
        public int Quantity { get; set; }
        public Book Book { get; set; } = new();
    }

    public class Book
    {
        public string Title { get; set; }
        public decimal Price { get; set; }
        public string ImageUrl { get; set; }
    }

}

<style>
    .fixed-header-grid .rz-datatable-scrollable-header {
        position: sticky;
        top: 0;
        z-index: 10;
        background-color: white;
    }

    .fixed-header-grid .rz-datatable-scrollable-body {
        max-height: 300px;
        overflow-y: auto;
    }
</style>

===========================================================================================================
@page "/checkbox-service"

<h3>Select Service(s):</h3>

<div>
    <label>
        <input type="checkbox" checked="@isCurrentService"
               @onchange="(e) => OnCheckboxChanged(e, "Current Service")" />
        Current Service
    </label>

    <label style="margin-left: 20px;">
        <input type="checkbox" checked="@isNewService"
               @onchange="(e) => OnCheckboxChanged(e, "New Service")" />
        New Service
    </label>
</div>

<p>You selected:</p>
<ul>
    @if (isCurrentService)
    {
        <li>Current Service</li>
    }
    @if (isNewService)
    {
        <li>New Service</li>
    }
</ul>

@code {
    private bool isCurrentService = false;
    private bool isNewService = false;

    private void OnCheckboxChanged(ChangeEventArgs e, string serviceName)
    {
        bool isChecked = (bool)e.Value;

        if (serviceName == "Current Service")
            isCurrentService = isChecked;
        else if (serviceName == "New Service")
            isNewService = isChecked;

        Console.WriteLine($"Checkbox changed: {serviceName}, Checked: {isChecked}");
    }
}

===========================================================================================================
@page "/checkbox-service"

<h3>Select Service(s):</h3>

<div>
    <label>
        <input type="checkbox" @bind="isCurrentService" @onchange="OnCheckboxChanged" />
        Current Service
    </label>

    <label style="margin-left: 20px;">
        <input type="checkbox" @bind="isNewService" @onchange="OnCheckboxChanged" />
        New Service
    </label>
</div>

<p>You selected:</p>
<ul>
    @if (isCurrentService)
    {
        <li>Current Service</li>
    }
    @if (isNewService)
    {
        <li>New Service</li>
    }
</ul>

@code {
    private bool isCurrentService = false;
    private bool isNewService = false;

    private void OnCheckboxChanged(ChangeEventArgs e)
    {
        Console.WriteLine($"Current: {isCurrentService}, New: {isNewService}");
        // Add additional logic here if needed
    }
}

===========================================================================================================
@page "/checkboxlist"

<h3>Checkbox List Example</h3>

@foreach (var item in Items)
{
    <div>
        <input type="checkbox"
               checked="@item.Selected"
               @onchange="(e) => OnCheckboxChanged(item, e)"
               disabled="@(!item.Enabled)" />
        <label>@item.Text</label>
    </div>
}

<button @onclick="ShowSelected">Show Selected</button>

@if (SelectedItems.Any())
{
    <h4>Selected Items:</h4>
    <ul>
        @foreach (var selected in SelectedItems)
        {
            <li>@selected.Text</li>
        }
    </ul>
}

@code {
    public class CheckboxItem
    {
        public string Text { get; set; }
        public bool Enabled { get; set; }
        public bool Selected { get; set; }
    }

    private List<CheckboxItem> Items = new List<CheckboxItem>
    {
        new CheckboxItem { Text = "Apple", Enabled = true, Selected = false },
        new CheckboxItem { Text = "Mango", Enabled = false, Selected = true },
        new CheckboxItem { Text = "Banana", Enabled = true, Selected = false }
    };

    private List<CheckboxItem> SelectedItems = new();

    private void OnCheckboxChanged(CheckboxItem item, ChangeEventArgs e)
    {
        item.Selected = (bool)e.Value;
    }

    private void ShowSelected()
    {
        SelectedItems = Items.Where(i => i.Selected).ToList();
    }
}

===========================================================================================================
@page "/checkboxlist"

<h3>Checkbox List</h3>

@foreach (var item in CheckboxItems)
{
    <div>
        <input type="checkbox"
               checked="@item.IsChecked"
               @onchange="(e) => OnCheckboxClick(item, e)"
               disabled="@(!item.IsEnabled)" />
        <label>@item.Text (@item.Value)</label>
    </div>
}

<button @onclick="Submit">Submit</button>

@if (SelectedItems.Any())
{
    <h4>Selected Items:</h4>
    <ul>
        @foreach (var selected in SelectedItems)
        {
            <li>@selected.Text (@selected.Value)</li>
        }
    </ul>
}

@code {
    public class CheckboxItem
    {
        public string Text { get; set; }
        public string Value { get; set; }
        public bool IsChecked { get; set; }
        public bool IsEnabled { get; set; }
    }

    private List<CheckboxItem> CheckboxItems = new List<CheckboxItem>
    {
        new CheckboxItem { Text = "Apple", Value = "1", IsChecked = false, IsEnabled = true },
        new CheckboxItem { Text = "Mango", Value = "2", IsChecked = true, IsEnabled = false },
        new CheckboxItem { Text = "Banana", Value = "3", IsChecked = false, IsEnabled = true }
    };

    private List<CheckboxItem> SelectedItems = new();

    private void OnCheckboxClick(CheckboxItem item, ChangeEventArgs e)
    {
        item.IsChecked = (bool)e.Value;
        Console.WriteLine($"Clicked: {item.Text}, Checked: {item.IsChecked}");
    }

    private void Submit()
    {
        SelectedItems = CheckboxItems.Where(x => x.IsChecked).ToList();
    }
}

===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
@page "/checkboxlist"
@using Radzen
@using System.ComponentModel.DataAnnotations

<h3>RadzenCheckBoxList Example</h3>

<RadzenCheckBoxList TValue="string"
                    Data="@options"
                    TextProperty="Text"
                    ValueProperty="Text"
                    DisabledProperty="!Enabled"
                    @bind-Value="@selectedItems"
                    Change="@OnSelectionChanged"
                    Style="width: 400px;" />

<p><strong>Selected Items:</strong> @string.Join(", ", selectedItems)</p>

@code {
    // Bound values
    private List<string> selectedItems = new();

    // Option item model
    public class OptionItem
    {
        public string Text { get; set; }
        public bool Selected { get; set; }
        public bool Enabled { get; set; }
    }

    // List of options
    private List<OptionItem> options = new()
    {
        new OptionItem { Text = "Option A", Selected = true, Enabled = true },
        new OptionItem { Text = "Option B", Selected = false, Enabled = true },
        new OptionItem { Text = "Option C", Selected = false, Enabled = false }
    };

    // Set default selected values based on Selected = true
    protected override void OnInitialized()
    {
        selectedItems = options.Where(o => o.Selected).Select(o => o.Text).ToList();
    }

    void OnSelectionChanged(object value)
    {
        selectedItems = value as List<string>;
    }
}

===========================================================================================================
@page "/checkboxlist"
@using Radzen
@using Radzen.Blazor

<h3>Radzen CheckBox List with Text, Selected, Enabled</h3>

<RadzenCheckBoxList TValue="string"
                    Data="@items"
                    TextProperty="Text"
                    ValueProperty="Text"
                    @bind-Value="@selectedValues">
    <Template Context="item">
        <div>
            <input type="checkbox"
                   value="@item.Text"
                   disabled="@(!item.Enabled)"
                   checked="@selectedValues.Contains(item.Text)"
                   @onchange="@((ChangeEventArgs e) => OnCheckChanged(item, e))" />
            @item.Text
        </div>
    </Template>
</RadzenCheckBoxList>

<p class="mt-3">
    <b>Selected:</b> @string.Join(", ", selectedValues)
</p>

@code {
    public class OptionItem
    {
        public string Text { get; set; }
        public bool Enabled { get; set; }
        public bool Selected { get; set; }
    }

    private List<OptionItem> items = new()
    {
        new OptionItem { Text = "Option A", Enabled = true, Selected = true },
        new OptionItem { Text = "Option B", Enabled = true, Selected = false },
        new OptionItem { Text = "Option C", Enabled = false, Selected = true },
        new OptionItem { Text = "Option D", Enabled = true, Selected = false }
    };

    private List<string> selectedValues = new();

    protected override void OnInitialized()
    {
        selectedValues = items
            .Where(i => i.Selected)
            .Select(i => i.Text)
            .ToList();
    }

    private void OnCheckChanged(OptionItem item, ChangeEventArgs e)
    {
        bool isChecked = (bool)e.Value;

        if (isChecked)
        {
            if (!selectedValues.Contains(item.Text))
                selectedValues.Add(item.Text);
        }
        else
        {
            selectedValues.Remove(item.Text);
        }

        item.Selected = isChecked;
    }
}

===========================================================================================================
@page "/checkboxlist"
@using Radzen
@using Radzen.Blazor

<h3>Radzen CheckBox List with Text, Selected, Enabled</h3>

<RadzenCheckBoxList TValue="string"
                    Data="@items"
                    TextProperty="Text"
                    ValueProperty="Text"
                    @bind-Value="@selectedValues">
    <Template Context="item">
        <div>
            <input type="checkbox"
                   value="@item.Text"
                   checked="@item.Selected"
                   disabled="@(!item.Enabled)"
                   @onchange="@((ChangeEventArgs e) => OnCheckChanged(item, e))" />
            @item.Text
        </div>
    </Template>
</RadzenCheckBoxList>

<p class="mt-3">
    <b>Selected Values:</b> @string.Join(", ", selectedValues)
</p>

@code {
    public class OptionItem
    {
        public string Text { get; set; }
        public bool Selected { get; set; }
        public bool Enabled { get; set; }
    }

    private List<OptionItem> items = new List<OptionItem>
    {
        new OptionItem { Text = "Option A", Selected = true, Enabled = true },
        new OptionItem { Text = "Option B", Selected = false, Enabled = true },
        new OptionItem { Text = "Option C", Selected = false, Enabled = false },
        new OptionItem { Text = "Option D", Selected = true, Enabled = true }
    };

    private List<string> selectedValues = new();

    protected override void OnInitialized()
    {
        selectedValues = items
            .Where(i => i.Selected)
            .Select(i => i.Text)
            .ToList();
    }

    private void OnCheckChanged(OptionItem item, ChangeEventArgs e)
    {
        bool isChecked = (bool)e.Value;

        if (isChecked)
        {
            if (!selectedValues.Contains(item.Text))
                selectedValues.Add(item.Text);
        }
        else
        {
            selectedValues.Remove(item.Text);
        }

        item.Selected = isChecked;
    }
}

===========================================================================================================
using System;
using System.Collections.Generic;
using System.Linq;

public class Employee
{
    public string Name { get; set; }
    public int Age { get; set; }
    public decimal Salary { get; set; }
}

public class Client
{
    public string Name { get; set; }
    public int Age { get; set; }
    public decimal Salary { get; set; }
    public DateTime DOB { get; set; }
    public string Pincode { get; set; }
}

public class StandardAnalysisRateResDto
{
    public int Id { get; set; }
    public int ModelId { get; set; }
    public decimal Ecr { get; set; }
    public int Ncr { get; set; }
    public string PublicNowSubProduct { get; set; }
    public int CbNcr { get; set; }
    public decimal CbEcr { get; set; }
    public decimal FedFundsRate { get; set; }
    public int MinBalance { get; set; }
    public int CorMinBalance { get; set; }
    public int RateExpirationPeriod { get; set; }
    public DateTime? RateInterestDate { get; set; }
    public int PricingExpirationPeriod { get; set; }
}

public class Program
{
    public static List<dynamic> GetListByType(Type type)
    {
        if (type == typeof(Employee))
        {
            return Enumerable.Range(1, 5)
                .Select(i => (dynamic)new Employee
                {
                    Name = $"Employee {i}",
                    Age = 25 + i,
                    Salary = 30000 + i * 1000
                }).ToList();
        }
        else if (type == typeof(Client))
        {
            return Enumerable.Range(1, 5)
                .Select(i => (dynamic)new Client
                {
                    Name = $"Client {i}",
                    Age = 30 + i,
                    Salary = 40000 + i * 1500,
                    DOB = DateTime.Now.AddYears(-30 - i),
                    Pincode = $"1000{i}"
                }).ToList();
        }
        else if (type == typeof(StandardAnalysisRateResDto))
        {
            return Enumerable.Range(1, 5)
                .Select(i => (dynamic)new StandardAnalysisRateResDto
                {
                    Id = i,
                    ModelId = 100 + i,
                    Ecr = 2.5m + i,
                    Ncr = 10 + i,
                    PublicNowSubProduct = $"Product {i}",
                    CbNcr = 5 + i,
                    CbEcr = 1.5m + i,
                    FedFundsRate = 4.25m + i,
                    MinBalance = 1000 * i,
                    CorMinBalance = 500 * i,
                    RateExpirationPeriod = 90 + i,
                    RateInterestDate = DateTime.Today.AddDays(i),
                    PricingExpirationPeriod = 180 + i
                }).ToList();
        }

        return new List<dynamic>();
    }

    public static void Main()
    {
        var analysisRates = GetListByType(typeof(StandardAnalysisRateResDto));

        Console.WriteLine("StandardAnalysisRateResDto:");
        foreach (var item in analysisRates)
        {
            Console.WriteLine($"Id: {item.Id}, ECR: {item.Ecr}, NCR: {item.Ncr}, Product: {item.PublicNowSubProduct}");
        }
    }
}

===========================================================================================================
using System;
using System.Collections.Generic;
using System.Linq;

public class StandardAnalysisRateResDto
{
    public int Id { get; set; }
    public int ModelId { get; set; }
    public decimal Ecr { get; set; }
    public int Ncr { get; set; }
    public string PublicNowSubProduct { get; set; }
    public int CbNcr { get; set; }
    public decimal CbEcr { get; set; }
    public decimal FedFundsRate { get; set; }
    public int MinBalance { get; set; }
    public int CorMinBalance { get; set; }
    public int RateExpirationPeriod { get; set; }
    public DateTime? RateInterestDate { get; set; }
    public int PricingExpirationPeriod { get; set; }
}

public class Program
{
    public static void Main()
    {
        var dummyData = Enumerable.Range(1, 5).Select(i => new StandardAnalysisRateResDto
        {
            Id = i,
            ModelId = 100823,
            Ecr = 0.3m + (i * 0.01m),
            Ncr = 120000,
            PublicNowSubProduct = "TE",
            CbNcr = 11,
            CbEcr = 3.15m,
            FedFundsRate = 4.86m,
            MinBalance = 250000,
            CorMinBalance = 5000 + (i * 100),
            RateExpirationPeriod = 10,
            RateInterestDate = null,
            PricingExpirationPeriod = 6
        }).ToList();

        foreach (var item in dummyData)
        {
            Console.WriteLine($"Id: {item.Id}, ModelId: {item.ModelId}, Ecr: {item.Ecr}, CorMinBalance: {item.CorMinBalance}");
        }
    }
}

===========================================================================================================
@inject CategoryService categoryService

<RadzenDropDown
    Data="@categories"
    TextProperty="Name"
    ValueProperty="Id"
    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
    AllowFiltering="true"
    Placeholder="Select Category"
    Change="@OnCategoryChange"
    @bind-Value="@selectedCategoryId"
    Filter="@OnFilter" />

@code {
    private List<Category> categories = new();
    private int? selectedCategoryId;

    protected override async Task OnInitializedAsync()
    {
        categories = await categoryService.GetCategoriesAsync();
    }

    private async Task OnFilter(string value)
    {
        categories = await categoryService.GetCategoriesAsync(value);
    }

    private void OnCategoryChange(object value)
    {
        selectedCategoryId = (int?)value;
        // You can perform further actions here
    }
}

===========================================================================================================
@page "/people-grid"
@using System.ComponentModel.DataAnnotations

@inject ILogger<PeopleGrid> Logger

<PageTitle>People Grid</PageTitle>

<h3>People List</h3>

<RadzenDataGrid TItem="Person" Data="@people" @ref="grid" Editable="true" EditMode="DataGridEditMode.Cell">
    <Columns>
        <RadzenDataGridColumn TItem="Person" Property="chkSelect" Title="Select" Width="70px">
            <Template Context="data">
                <RadzenCheckBox @bind-Value="data.chkSelect" TValue="bool" />
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="Person" Property="Name" Title="Name">
            <Template Context="data">
                <RadzenTextBox @bind-Value="data.Name" Style="width:100%" />
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="Person" Property="Age" Title="Age">
            <Template Context="data">
                <RadzenNumeric TValue="int" @bind-Value="data.Age" Style="width:100%" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

<br />

<RadzenButton Text="Save Changes" Click="@SaveChanges" Style="margin-top:10px" Icon="save" />

@code {
    private RadzenDataGrid<Person> grid;
    private List<Person> people = new();
    private List<Person> originalPeople = new();
    private Dictionary<int, Person> originalPeopleDict = new();

    protected override void OnInitialized()
    {
        // Simulate loading from DB
        originalPeople = new List<Person>
        {
            new Person { Id = 1, chkSelect = false, Name = "John", Age = 30 },
            new Person { Id = 2, chkSelect = true, Name = "Alice", Age = 25 },
            new Person { Id = 3, chkSelect = false, Name = "Bob", Age = 40 }
        };

        // Make a deep copy for editing
        people = originalPeople.Select(p => new Person
        {
            Id = p.Id,
            chkSelect = p.chkSelect,
            Name = p.Name,
            Age = p.Age
        }).ToList();

        // Optional: Dictionary for faster lookup
        originalPeopleDict = originalPeople.ToDictionary(x => x.Id);
    }

    private void SaveChanges()
    {
        var modifiedRows = people.Where(current =>
        {
            if (!originalPeopleDict.TryGetValue(current.Id, out var original))
                return false;

            return original.chkSelect != current.chkSelect ||
                   original.Name != current.Name ||
                   original.Age != current.Age;
        }).ToList();

        Logger.LogInformation($"Modified Rows Count = {modifiedRows.Count}");

        foreach (var row in modifiedRows)
        {
            Logger.LogInformation($"Id={row.Id}, Name={row.Name}, Age={row.Age}, chkSelect={row.chkSelect}");
        }

        // TODO: Call API / DB Save logic here with modifiedRows
    }

    public class Person
    {
        public int Id { get; set; }
        public bool chkSelect { get; set; }
        public string Name { get; set; }
        public int Age { get; set; }
    }
}

===========================================================================================================
@page "/people-grid"
@using System.ComponentModel.DataAnnotations

@inject ILogger<PeopleGrid> Logger

<PageTitle>People Grid</PageTitle>

<h3>People List</h3>

<RadzenDataGrid TItem="Person" Data="@people" @ref="grid" Editable="true" EditMode="DataGridEditMode.Cell">
    <Columns>
        <RadzenDataGridColumn TItem="Person" Property="chkSelect" Title="Select" Width="70px">
            <Template Context="data">
                <RadzenCheckBox @bind-Value="data.chkSelect" TValue="bool" />
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="Person" Property="Name" Title="Name">
            <Template Context="data">
                <RadzenTextBox @bind-Value="data.Name" Style="width:100%" />
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="Person" Property="Age" Title="Age">
            <Template Context="data">
                <RadzenNumeric TValue="int" @bind-Value="data.Age" Style="width:100%" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

<br />

<RadzenButton Text="Save Changes" Click="@SaveChanges" Style="margin-top:10px" Icon="save" />

@code {
    private RadzenDataGrid<Person> grid;
    private List<Person> people = new();
    private List<Person> originalPeople = new();
    private Dictionary<int, Person> originalPeopleDict = new();

    protected override void OnInitialized()
    {
        // Simulate loading from DB
        originalPeople = new List<Person>
        {
            new Person { Id = 1, chkSelect = false, Name = "John", Age = 30 },
            new Person { Id = 2, chkSelect = true, Name = "Alice", Age = 25 },
            new Person { Id = 3, chkSelect = false, Name = "Bob", Age = 40 }
        };

        // Make a deep copy for editing
        people = originalPeople.Select(p => new Person
        {
            Id = p.Id,
            chkSelect = p.chkSelect,
            Name = p.Name,
            Age = p.Age
        }).ToList();

        // Optional: Dictionary for faster lookup
        originalPeopleDict = originalPeople.ToDictionary(x => x.Id);
    }

    private void SaveChanges()
    {
        var modifiedRows = people.Where(current =>
        {
            if (!originalPeopleDict.TryGetValue(current.Id, out var original))
                return false;

            return original.chkSelect != current.chkSelect ||
                   original.Name != current.Name ||
                   original.Age != current.Age;
        }).ToList();

        Logger.LogInformation($"Modified Rows Count = {modifiedRows.Count}");

        foreach (var row in modifiedRows)
        {
            Logger.LogInformation($"Id={row.Id}, Name={row.Name}, Age={row.Age}, chkSelect={row.chkSelect}");
        }

        // TODO: Call API / DB Save logic here with modifiedRows
    }

    public class Person
    {
        public int Id { get; set; }
        public bool chkSelect { get; set; }
        public string Name { get; set; }
        public int Age { get; set; }
    }
}

===========================================================================================================
@code {
    private RadzenDataGrid<Person> grid;

    private List<Person> people = new()
    {
        new Person { Id = 1, Name = "John", Age = 25 },
        new Person { Id = 2, Name = "Jane", Age = 30 },
        new Person { Id = 3, Name = "Alice", Age = 22 }
    };

    // Backup copy to track original values
    private List<Person> originalPeople;

    protected override void OnInitialized()
    {
        // Make a deep copy of original data
        originalPeople = people.Select(p => new Person
        {
            Id = p.Id,
            chkSelect = p.chkSelect,
            Name = p.Name,
            Age = p.Age
        }).ToList();
    }

    private void SaveChanges()
    {
        var modifiedRows = people.Where(p =>
            {
                var original = originalPeople.FirstOrDefault(x => x.Id == p.Id);
                if (original == null) return false;

                return original.chkSelect != p.chkSelect ||
                       original.Name != p.Name ||
                       original.Age != p.Age;
            }).ToList();

        Console.WriteLine($"Modified rows: {modifiedRows.Count}");
        foreach (var row in modifiedRows)
        {
            Console.WriteLine($"Id={row.Id}, Name={row.Name}, Age={row.Age}, chkSelect={row.chkSelect}");
        }
    }

    public class Person
    {
        public int Id { get; set; }
        public bool chkSelect { get; set; }
        public string Name { get; set; }
        public int Age { get; set; }
    }
}

===========================================================================================================
using System;
using System.Collections.Generic;
using System.Linq;

namespace YourNamespace
{
    public class CampaignElementResDto
    {
        public int Id { get; set; }
        public string Element { get; set; }
        public string PRReportName { get; set; }
        public string PRName { get; set; }
        public string LongName { get; set; }
        public string AfpCode { get; set; }
        public decimal StandardPrice { get; set; }
        public int Tier1Volume { get; set; }
        public decimal Tier2Price { get; set; }
        public int Tier2Volume { get; set; }
        public int Tier3Volume { get; set; }
        public decimal Tier3Price { get; set; }
        public int CampaignId { get; set; }
        public bool AlwaysShow { get; set; }
        public decimal Cost { get; set; }
        public string PcdElement { get; set; }
        public decimal CompPrice { get; set; }
        public decimal UnitPrice { get; set; }
        public int Volume { get; set; }
        public int ElementID { get; set; }
        public char ChargeClass { get; set; }
        public char TieredType { get; set; }
        public int Tier { get; set; }
        public string KeyAccount { get; set; }
        public int AnalysisId { get; set; }
        public string BillingMethod { get; set; }
        public string Description { get; set; }
        public bool SetupFree { get; set; }
        public decimal PositiveCollectedBalance { get; set; }
    }

    public static class CampaignElementResDtoGenerator
    {
        public static List<CampaignElementResDto> GetDummyData()
        {
            int modelId = 100823;

            return Enumerable.Range(1, 5).Select(i => new CampaignElementResDto
            {
                Id = modelId + i,
                Element = $"Element {i}",
                PRReportName = $"PR Report {i}",
                PRName = $"PR Name {i}",
                LongName = $"Long Name {i}",
                AfpCode = $"Afp-{i:D3}",
                StandardPrice = 100 + i,
                Tier1Volume = 10 * i,
                Tier2Price = 200 + i,
                Tier2Volume = 20 * i,
                Tier3Volume = 30 * i,
                Tier3Price = 300 + i,
                CampaignId = modelId,
                AlwaysShow = i % 2 == 0,
                Cost = 50 + i,
                PcdElement = $"PcdElement-{i}",
                CompPrice = 150 + i,
                UnitPrice = 250 + i,
                Volume = 500 + i,
                ElementID = 1000 + i,
                ChargeClass = 'A',
                TieredType = 'B',
                Tier = i,
                KeyAccount = $"KeyAccount {i}",
                AnalysisId = 2000 + i,
                BillingMethod = $"BillingMethod {i}",
                Description = $"Description {i}",
                SetupFree = i % 2 == 0,
                PositiveCollectedBalance = 1000 + (10 * i)
            }).ToList();
        }
    }
}

===========================================================================================================
using System;
using System.Collections.Generic;
using System.Linq;

public class AdjustedAnalysisDataModel
{
    public decimal CustomerName { get; set; }
    public decimal NoOfAccount { get; set; }
    public string ChargeClass { get; set; }
    public string KeyAccounts { get; set; }
    public string ProductCode { get; set; }
    public bool Include { get; set; }
    public int ID { get; set; }
    public string BillingMethod { get; set; }
    public decimal Ecr { get; set; }
    public decimal NegativeCollectedRate { get; set; }
    public decimal PositiveCollectedBalance { get; set; }
    public decimal NegativeCollectedBalance { get; set; }
    public decimal AvgLedgerBalance { get; set; }
    public decimal AvgCollectedBalance { get; set; }
    public string ExceptionSetName { get; set; }
    public string ExceptionExpiration { get; set; }
    public bool UseStandardEcr { get; set; }
    public bool EcrOnlyChange { get; set; }
    public string RateChangeType { get; set; }
}

public static class DummyAnalysisDataGenerator
{
    public static List<AdjustedAnalysisDataModel> GenerateDummyAdjustedAnalysisData()
    {
        return Enumerable.Range(1, 5).Select(i => new AdjustedAnalysisDataModel
        {
            CustomerName = 1000 + i,
            NoOfAccount = 50 + i,
            ChargeClass = "A",
            KeyAccounts = $"KeyAccount_{i}",
            ProductCode = $"Product_{i}",
            Include = i % 2 == 0,
            ID = 100823, // Fixed as you asked
            BillingMethod = "Monthly",
            Ecr = 1.5m + i,
            NegativeCollectedRate = 0.5m + i,
            PositiveCollectedBalance = 5000.0m + i,
            NegativeCollectedBalance = -1000.0m - i,
            AvgLedgerBalance = 15000.0m + i,
            AvgCollectedBalance = 14500.0m + i,
            ExceptionSetName = $"Exception_{i}",
            ExceptionExpiration = DateTime.Now.AddMonths(i).ToString("yyyy-MM-dd"),
            UseStandardEcr = i % 2 == 1,
            EcrOnlyChange = i % 2 == 0,
            RateChangeType = i % 2 == 0 ? "Increase" : "Decrease"
        }).ToList();
    }
}

===========================================================================================================
public static List<AdjustedElementDataModel> GenerateDummyAdjustedElements()
    {
        return Enumerable.Range(1, 5).Select(i => new AdjustedElementDataModel
        {
            Element = $"Element_{i}",
            PRReportName = $"PRReport_{i}",
            PRName = $"PRName_{i}",
            LongName = $"LongName_{i}",
            AfpCode = $"Afp_{i}",
            StandardPrice = 100.0m + i,
            Tier1Volume = 10 * i,
            Tier2Price = 50.0m + i,
            Tier2Volume = 20 * i,
            Tier3Price = 75.0m + i,
            ComaignId = 2000 + i,
            AlwaysShow = i % 2 == 0,
            Cost = 500.0m + i,
            PcdElement = $"PcdElement_{i}",
            CompPrice = 250.0m + i,
            UnitPrice = 20.0m + i,
            Volume = 100 * i,
            ElementID = 3000 + i,
            ChargeClass = 'A',
            TieredType = 'B',
            Tier = i,
            KeyAccount = $"KeyAccount_{i}",
            AnalysisId = 100823, // Fixed as per your instruction
            BillingMethod = "Monthly",
            Description = $"Description_{i}",
            SetupFree = i % 2 == 1,
            PositiveCollectedBalance = 1000.0m + i
        }).ToList();
    }
===========================================================================================================
var campaigns = new List<Campaign>
{
    new Campaign { TierId = 7, Id = 6, CampaignName = "Electronic Bil Payment Pricing Campaign", Ecr = 0, Ncr = 8.3m, TierMinBalance = 0, Message = "0" },
    new Campaign { TierId = 19, Id = 3, CampaignName = "Mortgage Warehouse Lending", Ecr = 2, Ncr = 9.3m, TierMinBalance = 50000, Message = "0" },
    new Campaign { TierId = 1, Id = 1, CampaignName = "Property Management", Ecr = 0, Ncr = 7m, TierMinBalance = 0, Message = "0" },
    new Campaign { TierId = 8, Id = 5, CampaignName = "Small Business Business Banking", Ecr = 0, Ncr = 8.3m, TierMinBalance = 0, Message = "0" },
    new Campaign { TierId = 2, Id = 2, CampaignName = "Title and Escrow Companies", Ecr = 0, Ncr = 7m, TierMinBalance = 0, Message = "0" }
};

===========================================================================================================
using System;
using System.Collections.Generic;
using System.Linq;

namespace YourNamespace
{
    public class AdjustedElementDataModel
    {
        public string Element { get; set; }
        public string PRReportName { get; set; }
        public string PRName { get; set; }
        public string LongName { get; set; }
        public string AfpCode { get; set; }
        public decimal StandardPrice { get; set; }
        public int Tier1Volume { get; set; }
        public decimal Tier2Price { get; set; }
        public int Tier2Volume { get; set; }
        public decimal Tier3Price { get; set; }
        public int CampaignId { get; set; }
        public bool AlwaysShow { get; set; }
        public decimal Cost { get; set; }
        public string PcdElement { get; set; }
        public decimal CompPrice { get; set; }
        public decimal UnitPrice { get; set; }
        public int Volume { get; set; }
        public int ElementID { get; set; }
        public char ChargeClass { get; set; }
        public char TieredType { get; set; }
        public int Tier { get; set; }
        public string KeyAccount { get; set; }
        public int AnalysisId { get; set; }
        public string BillingMethod { get; set; }
        public string Description { get; set; }
        public bool SetupFree { get; set; }
    }

    public static class AdjustedElementDataModelFactory
    {
        public static List<AdjustedElementDataModel> GenerateDummyData() =>
            Enumerable.Range(1, 5).Select(i => new AdjustedElementDataModel
            {
                Element = $"Element{i}",
                PRReportName = $"Report{i}",
                PRName = $"PR{i}",
                LongName = $"Long Name {i}",
                AfpCode = $"AFP00{i}",
                StandardPrice = 100m * i,
                Tier1Volume = 10 * i,
                Tier2Price = 90m * i,
                Tier2Volume = 15 * i,
                Tier3Price = 80m * i,
                CampaignId = 120 + i,
                AlwaysShow = i % 2 == 0,
                Cost = 50m * i,
                PcdElement = $"PCD00{i}",
                CompPrice = 95m * i,
                UnitPrice = 5m * i,
                Volume = 500 * i,
                ElementID = i,
                ChargeClass = (char)('A' + (i - 1)),
                TieredType = (i % 2 == 0) ? 'S' : 'T',
                Tier = i,
                KeyAccount = $"KeyAcc{i}",
                AnalysisId = 100823,
                BillingMethod = (i % 2 == 0) ? "Quarterly" : "Monthly",
                Description = $"Sample description {i}",
                SetupFree = i % 2 != 0
            }).ToList();
    }
}

===========================================================================================================
@page "/employeeform"
@using System.ComponentModel.DataAnnotations

<h3>Employee Management</h3>

<button class="btn btn-primary mb-3" @onclick="OpenAddModal">Add Employee</button>

<table class="table table-bordered">
    <thead>
        <tr>
            <th>Name</th>
            <th>Department</th>
            <th>Email</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var emp in Employees)
        {
            <tr>
                <td>@emp.Name</td>
                <td>@emp.Department</td>
                <td>@emp.Email</td>
                <td>
                    <button class="btn btn-sm btn-warning me-1" @onclick="() => OpenEditModal(emp)">Edit</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@if (IsModalVisible)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@ModalTitle</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="CurrentEmployee" OnValidSubmit="SaveEmployee">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label class="form-label">Name</label>
                            <InputText class="form-control" @bind-Value="CurrentEmployee.Name" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Department</label>
                            <InputText class="form-control" @bind-Value="CurrentEmployee.Department" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Email</label>
                            <InputText class="form-control" @bind-Value="CurrentEmployee.Email" />
                        </div>

                        <div class="modal-footer">
                            <button class="btn btn-secondary" type="button" @onclick="CloseModal">Cancel</button>
                            <button class="btn btn-primary" type="submit">Save</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Employee> Employees = new();
    private Employee CurrentEmployee = new();
    private bool IsModalVisible = false;
    private string ModalTitle = "Add Employee";

    private void OpenAddModal()
    {
        CurrentEmployee = new Employee();
        ModalTitle = "Add Employee";
        IsModalVisible = true;
    }

    private void OpenEditModal(Employee emp)
    {
        CurrentEmployee = new Employee
        {
            Id = emp.Id,
            Name = emp.Name,
            Department = emp.Department,
            Email = emp.Email
        };
        ModalTitle = "Edit Employee";
        IsModalVisible = true;
    }

    private void CloseModal()
    {
        IsModalVisible = false;
    }

    private void SaveEmployee()
    {
        if (CurrentEmployee.Id == 0)
        {
            CurrentEmployee.Id = Employees.Count + 1;
            Employees.Add(CurrentEmployee);
        }
        else
        {
            var index = Employees.FindIndex(e => e.Id == CurrentEmployee.Id);
            if (index != -1)
                Employees[index] = CurrentEmployee;
        }

        CloseModal();
    }

    public class Employee
    {
        public int Id { get; set; }

        [Required(ErrorMessage = "Name is required")]
        public string Name { get; set; } = string.Empty;

        [Required(ErrorMessage = "Department is required")]
        public string Department { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email")]
        public string Email { get; set; } = string.Empty;
    }
}

===========================================================================================================
@page "/service-pricing"

@using System.ComponentModel.DataAnnotations

<div class="p-4">

    <!-- Controls Bar -->
    <div class="controls-bar d-flex align-items-center flex-wrap mb-3">
        <div class="form-check me-3">
            <input class="form-check-input" type="checkbox" @bind="SoldProductsOnly" id="soldProductsOnly" />
            <label class="form-check-label" for="soldProductsOnly">
                Sold Products Only
            </label>
        </div>

        <div class="form-check me-3">
            <input class="form-check-input" type="checkbox" @bind="ShowCompetitorPrice" id="showCompetitorPrice" />
            <label class="form-check-label" for="showCompetitorPrice">
                Show Competitor Price
            </label>
        </div>

        <button class="btn btn-outline-primary me-2" @onclick="AddService">Add Service</button>
        <button class="btn btn-outline-primary me-2" @onclick="ResetValues">Reset To Initial Value</button>
        <button class="btn btn-outline-primary me-2" @onclick="Print">Print</button>
        <button class="btn btn-primary" @onclick="UpdateUnitPricing">Update Unit Pricing</button>
    </div>

    <!-- Table -->
    <table class="table table-bordered custom-table">
        <thead class="table-light">
            <tr>
                <th>Products</th>
                <th>Sub Product Name</th>
                <th>Account</th>
                <th>Standard Price</th>
                <th>Volume</th>
                <th>Unit Price</th>
                <th>Discount %</th>
                <th>Exception Fees</th>
                <th>Fee Income</th>
                <th>Element ID</th>
                <th>ARP Code</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <select class="form-select">
                        <option>All Products</option>
                    </select>
                </td>
                <td>Deposit Assessment</td>
                <td>123</td>
                <td>0.25000</td>
                <td>0.010</td>
                <td>
                    <select class="form-select">
                        <option>0.2500</option>
                    </select>
                </td>
                <td>0.25000</td>
                <td>0.25000</td>
                <td>0.25000</td>
                <td>0.25000</td>
                <td>0.25000</td>
                <td><a href="#" @onclick="DeleteRow">‚úñ</a></td>
            </tr>
        </tbody>
    </table>

</div>

@code {
    private bool SoldProductsOnly { get; set; }
    private bool ShowCompetitorPrice { get; set; }

    private void AddService()
    {
        // Logic for Add Service
    }

    private void ResetValues()
    {
        // Logic for Reset to Initial Value
    }

    private void Print()
    {
        // Logic for Print
    }

    private void UpdateUnitPricing()
    {
        // Logic for Update Unit Pricing
    }

    private void DeleteRow()
    {
        // Logic for deleting a row
    }
}

===========================================================================================================
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Service Pricing Layout</title>

  <!-- Bootstrap 5 CDN -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">

  <style>
    .controls-bar {
      background-color: #cce0f5; /* Light blue background */
      padding: 10px;
      border-radius: 5px;
      margin-bottom: 15px;
    }
    .controls-bar .form-check {
      margin-right: 20px;
    }
    .controls-bar .btn {
      margin-right: 10px;
    }
    .custom-table th, .custom-table td {
      vertical-align: middle;
      text-align: center;
    }
    .custom-table {
      background-color: #f9f9f9;
    }
  </style>

</head>
<body class="p-4">

  <!-- Controls bar -->
  <div class="controls-bar d-flex align-items-center flex-wrap">
    <div class="form-check me-3">
      <input class="form-check-input" type="checkbox" id="soldProductsOnly">
      <label class="form-check-label" for="soldProductsOnly">
        Sold Products Only
      </label>
    </div>

    <div class="form-check me-3">
      <input class="form-check-input" type="checkbox" id="showCompetitorPrice">
      <label class="form-check-label" for="showCompetitorPrice">
        Show Competitor Price
      </label>
    </div>

    <button class="btn btn-outline-primary">Add Service</button>
    <button class="btn btn-outline-primary">Reset To Initial Value</button>
    <button class="btn btn-outline-primary">Print</button>
    <button class="btn btn-primary">Update Unit Pricing</button>
  </div>

  <!-- Table -->
  <table class="table table-bordered custom-table">
    <thead class="table-light">
      <tr>
        <th>Products</th>
        <th>Sub Product Name</th>
        <th>Account</th>
        <th>Standard Price</th>
        <th>Volume</th>
        <th>Unit Price</th>
        <th>Discount %</th>
        <th>Exception Fees</th>
        <th>Fee Income</th>
        <th>Element ID</th>
        <th>ARP Code</th>
        <th>Action</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>
          <select class="form-select">
            <option>All Products</option>
          </select>
        </td>
        <td>Deposit Assessment</td>
        <td>123</td>
        <td>0.25000</td>
        <td>0.010</td>
        <td>
          <select class="form-select">
            <option>0.2500</option>
          </select>
        </td>
        <td>0.25000</td>
        <td>0.25000</td>
        <td>0.25000</td>
        <td>0.25000</td>
        <td>0.25000</td>
        <td><a href="#">‚úñ</a></td>
      </tr>
    </tbody>
  </table>

</body>
</html>

===========================================================================================================
<div class="d-flex align-items-center gap-2 flex-wrap text-center">
    <input type="checkbox" class="form-check-input" id="myCheckbox">
    <label class="form-check-label me-3" for="myCheckbox">Checkbox</label>

    <button class="btn btn-primary">Add Service</button>
    <button class="btn btn-success">Update Unit Pricing</button>
    <button class="btn btn-warning text-dark">Reset To Initial Values</button>
    <button class="btn btn-info text-white">Print</button>
    <button class="btn btn-danger">Undo Current Changes</button>
  </div>
===========================================================================================================
@inherits AnalysisBase
@inject IJSRuntime JS

<h3>Analysis Report</h3>
<button class="export-button" @onclick="ExportToPdf">Export to PDF</button>

using Microsoft.AspNetCore.Components;
using Microsoft.JSInterop;
using GrapeCity.Documents.Pdf;
using GrapeCity.Documents.Text;
using System.Drawing;

public partial class AnalysisBase : ComponentBase
{
    [Inject] public IJSRuntime JS { get; set; } = default!;

    protected async Task ExportToPdf()
    {
        var pdfBytes = GenerateAnalysisPdf();
        var base64 = Convert.ToBase64String(pdfBytes);
        await JS.InvokeVoidAsync("downloadFile", "AnalysisReport.pdf", base64);
    }

    private byte[] GenerateAnalysisPdf()
    {
        var doc = new GcPdfDocument();
        var page = doc.NewPage();

        var format = new TextFormat
        {
            Font = StandardFonts.Helvetica,
            FontSize = 14,
        };

        page.Graphics.DrawString("üìä Analysis Report", new TextFormat { Font = StandardFonts.HelveticaBold, FontSize = 18 }, new PointF(72, 72));
        page.Graphics.DrawString("Generated on: " + DateTime.Now.ToString("f"), format, new PointF(72, 100));
        page.Graphics.DrawString("‚Ä¢ Item 1: Value A", format, new PointF(72, 130));
        page.Graphics.DrawString("‚Ä¢ Item 2: Value B", format, new PointF(72, 150));

        using var ms = new MemoryStream();
        doc.Save(ms);
        return ms.ToArray();
    }
}
.export-button {
    background-color: #4caf50;
    color: white;
    padding: 10px 16px;
    font-size: 14px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}
<script>
    window.downloadFile = (fileName, base64Data) => {
        const link = document.createElement('a');
        link.download = fileName;
        link.href = 'data:application/pdf;base64,' + base64Data;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };
</script>
export function downloadFile(fileName, base64Data) {
    const link = document.createElement('a');
    link.download = fileName;
    link.href = 'data:application/pdf;base64,' + base64Data;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
}
private IJSObjectReference? jsModule;

protected override async Task OnInitializedAsync()
{
    jsModule = await JS.InvokeAsync<IJSObjectReference>("import", "/js/download.js");
}

protected async Task ExportToPdf()
{
    var pdfBytes = GenerateAnalysisPdf();
    var base64 = Convert.ToBase64String(pdfBytes);
    if (jsModule != null)
    {
        await jsModule.InvokeVoidAsync("downloadFile", "AnalysisReport.pdf", base64);
    }
}

===========================================================================================================
/* This helps if styles are not scoped correctly */
.hide-header-grid .rz-datagrid-thead {
    display: none !important;
}

===========================================================================================================
using System;
using System.Reflection;

public class Sample
{
    public string Name { get; set; }
    public int Age { get; set; }
    public decimal Salary { get; set; }
}

class Program
{
    static void Main()
    {
        Type type = typeof(Sample);
        PropertyInfo[] properties = type.GetProperties();

        foreach (var prop in properties)
        {
            Type propType = prop.PropertyType;

            if (propType == typeof(string))
            {
                Console.WriteLine($"{prop.Name} is a string");
            }
            else if (propType == typeof(int))
            {
                Console.WriteLine($"{prop.Name} is an int");
            }
            else if (propType == typeof(decimal))
            {
                Console.WriteLine($"{prop.Name} is a decimal");
            }
            else
            {
                Console.WriteLine($"{prop.Name} is of type {propType.Name}");
            }
        }
    }
}

===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
.link-button {
            background: none;
            border: none;
            color: #007bff;
            text-decoration: underline;
            cursor: pointer;
            font-size: 16px;
            padding: 0;
        }

===========================================================================================================
using System;
using System.Collections.Generic;
using System.Linq;

public class InteresetExpensesData
{
    public int Id { get; set; }
    public int ModelId { get; set; }
    public int AccountType { get; set; }
    public decimal AvgColBal { get; set; }
    public bool Collateralized { get; set; }
    public string InterestType { get; set; }
    public decimal CurrentIntRate { get; set; }
    public decimal ExceptionIntRate { get; set; }
    public string BalanceName { get; set; }
    public decimal InterestRat { get; set; }
    public DateTime AppliedExpiration { get; set; }
    public decimal FdicCost { get; set; }
    public decimal FdicRate { get; set; }
    public bool UseFedFunds { get; set; }
    public decimal FedFundsRate { get; set; }
    public string AccountNumber { get; set; }
    public decimal ExceptionIntRateBonus { get; set; }
    public decimal CurrentRate { get; set; }
    public DateTime RateExpiration { get; set; }
    public bool DerivedFromHogan { get; set; }
    public int BonusType { get; set; }
    public int CampaignId { get; set; }
    public string ProductGroup { get; set; }
    public string EIEligibility { get; set; }
    public string EIEligibilityMsg { get; set; }
    public int MaxBalance { get; set; }
    public decimal MaxAppliedInterestRate { get; set; }
    public int Include { get; set; }

    // Dummy data generator
    public static List<InteresetExpensesData> GetDummyData(int modelId)
    {
        var dummyData = Enumerable.Range(1, 5).Select(i => new InteresetExpensesData
        {
            Id = i,
            ModelId = modelId,
            AccountType = i % 3,
            AvgColBal = 10000 + i * 1000,
            Collateralized = i % 2 == 0,
            InterestType = "Fixed",
            CurrentIntRate = 4.5m + i,
            ExceptionIntRate = 4.0m + i,
            BalanceName = $"Balance {i}",
            InterestRat = 3.5m + i,
            AppliedExpiration = DateTime.Today.AddMonths(i),
            FdicCost = 12.34m + i,
            FdicRate = 0.25m + i,
            UseFedFunds = i % 2 != 0,
            FedFundsRate = 5.0m + i,
            AccountNumber = $"ACC00{i}",
            ExceptionIntRateBonus = 0.1m * i,
            CurrentRate = 4.25m + i,
            RateExpiration = DateTime.Today.AddMonths(i * 2),
            DerivedFromHogan = true,
            BonusType = i % 2,
            CampaignId = 1000 + i,
            ProductGroup = "Business",
            EIEligibility = "Eligible",
            EIEligibilityMsg = "Qualified",
            MaxBalance = 50000 + i * 1000,
            MaxAppliedInterestRate = 4.0m + i,
            Include = 1
        }).ToList();

        return dummyData;
    }
}

// Example usage
public class Program
{
    public static void Main()
    {
        int modelId = 100823;
        var list = InteresetExpensesData.GetDummyData(modelId);
        
        // Output for demo
        foreach (var item in list)
        {
            Console.WriteLine($"{item.Id} - {item.AccountNumber} - {item.CurrentIntRate}%");
        }
    }
}

===========================================================================================================
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Outer Table with Nested Table</title>
  <style>
    /* Outer Table Styling */
    .outer-table {
      width: 100%;
      border-collapse: collapse;
      border: 2px solid #444;
      font-family: Arial, sans-serif;
      margin-top: 30px;
    }

    .outer-table th, .outer-table td {
      border: 1px solid #aaa;
      padding: 10px;
      text-align: left;
      background-color: #f9f9f9;
    }

    .outer-table th:nth-child(1),
    .outer-table td:nth-child(1) {
      width: 24%;
    }

    .outer-table th:nth-child(n+2),
    .outer-table td:nth-child(n+2) {
      width: 19%;
    }

    /* Inner Table Styling */
    .inner-table {
      width: 100%;
      border-collapse: collapse;
      background-color: #fff;
      margin-top: 10px;
    }

    .inner-table th, .inner-table td {
      border: 1px dashed #666;
      padding: 6px;
      background-color: #f0f8ff;
    }

    .inner-table th {
      background-color: #cce5ff;
      font-weight: bold;
    }
  </style>
</head>
<body>

  <table class="outer-table">
    <thead>
      <tr>
        <th>Account Name</th>
        <th>Region</th>
        <th>Status</th>
        <th>Sales</th>
        <th>Manager</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>Alpha Corporation</td>
        <td>North</td>
        <td>Active</td>
        <td>$12,500</td>
        <td>John Doe</td>
      </tr>
      <tr>
        <td colspan="5">
          <strong>Details:</strong>
          <table class="inner-table">
            <thead>
              <tr>
                <th>Product</th>
                <th>Unit Price</th>
                <th>Quantity</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>Widget A</td>
                <td>$10</td>
                <td>100</td>
              </tr>
              <tr>
                <td>Widget B</td>
                <td>$15</td>
                <td>200</td>
              </tr>
            </tbody>
          </table>
        </td>
      </tr>
    </tbody>
  </table>

</body>
</html>

===========================================================================================================
  .warning-box {
      display: flex;
      align-items: center;
      background-color: #fff3cd;
      color: #856404;
      border: 1px solid #ffeeba;
      border-radius: 4px;
      padding: 10px 15px;
      margin: 20px 0;
      font-family: Arial, sans-serif;
    }

    .warning-icon {
      font-size: 20px;
      margin-right: 10px;
    }

    .warning-text {
      font-size: 14px;
    }<div class="warning-box">
    <div class="warning-icon">‚ö†Ô∏è</div>
    <div class="warning-text">This is a warning message. Please check your inputs.</div>
  </div>
===========================================================================================================
.container {
  border: 1px solid #ccc;
  background-color: #fff;
  padding: 10px;
}

.header {
  background-color: #d9e9f7;
  padding: 10px;
  font-weight: bold;
  border-bottom: 1px solid #ccc;
}

.main-content {
  display: flex;
  padding: 15px;
  gap: 20px;
}

.table-section {
  width: 30%;
}

table {
  width: 100%;
  border-collapse: collapse;
  border: 1px solid #ccc;
}

th {
  background-color: #eee;
  padding: 8px;
  text-align: center;
  border: 1px solid #ccc;
}

td {
  padding: 8px;
  border: 1px solid #ccc;
  text-align: center;
}

.form-section {
  width: 45%;
}

.form-section h4 {
  margin: 0 0 10px 0;
  font-weight: bold;
}

.form-group {
  display: flex;
  align-items: center;
  margin-bottom: 10px;
}

.form-group label {
  font-size: 14px;
  width: 220px;
  margin-right: 10px;
}

.form-group input[type="date"] {
  flex: 1;
  padding: 6px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

.view-button {
  margin-top: 10px;
  padding: 6px 12px;
  background-color: #f0f0f0;
  border: 1px solid #ccc;
  cursor: pointer;
}

.right-section {
  width: 25%;
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  justify-content: space-between;
}

.propose-button {
  padding: 8px 14px;
  background-color: #ccc;
  border: none;
  border-radius: 4px;
  cursor: not-allowed;
  opacity: 0.6;
}

.error-message {
  color: red;
  font-weight: bold;
  margin-top: 10px;
  text-align: right;
}

@page "/new-customer-model"

<div class="container">
  <div class="header">Report Search</div>
  <div class="main-content">
    <!-- Left: Table -->
    <div class="table-section">
      <table>
        <thead>
          <tr>
            <th colspan="2">Key Accounts Included in Model</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>123</td>
            <td>Sample Account</td>
          </tr>
        </tbody>
      </table>
    </div>

    <!-- Middle: Form Section -->
    <div class="form-section">
      <h4>New Customer Model UX - @DateTime.Today.ToString("MM/dd/yyyy")</h4>
      <div class="form-group">
        <label for="effectiveDate">Proposed Pricing Effective Date</label>
        <input type="date" id="effectiveDate" @bind="effectiveDate" class="form-control" />
      </div>
      <div class="form-group">
        <label for="expirationDate">Proposed Pricing Expiration Date</label>
        <input type="date" id="expirationDate" @bind="expirationDate" class="form-control" />
      </div>
      <button class="view-button" @onclick="ViewProposal">View Proposal Data</button>
    </div>

    <!-- Right: Button and Error -->
    <div class="right-section">
      <button class="propose-button" disabled>Propose Approval</button>
      <div class="error-message">Not Enough Information To Determine Tier</div>
    </div>
  </div>
</div>

@code {
  private DateTime effectiveDate = new DateTime(2024, 8, 1);
  private DateTime expirationDate = new DateTime(2025, 7, 31);

  private void ViewProposal()
  {
    // You can add logic to handle the button click
    Console.WriteLine($"Effective: {effectiveDate}, Expiration: {expirationDate}");
  }
}

===========================================================================================================
@code {
    bool isExpanded = true;
}

<RadzenPanel Style="border: 1px solid lightgray;">
    <HeaderTemplate>
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <span><b>My Panel Title</b></span>
            <RadzenButton Icon=@(isExpanded ? "expand_less" : "expand_more") Size="Small" Click="@(() => isExpanded = !isExpanded)" />
        </div>
    </HeaderTemplate>
    <ChildContent>
        @if (isExpanded)
        {
            <p>This is the content that can be collapsed.</p>
        }
    </ChildContent>
</RadzenPanel>

===========================================================================================================
@using Radzen;
@using Radzen.Blazor;
@using System.Collections.Generic;
@using System.Linq;

@* Declare the CheckboxItem class *@
@code {
    public class CheckboxItem
    {
        public int Id { get; set; }
        public string Text { get; set; } = "";
        public bool IsSelected { get; set; }
    }
}

<div class="p-6 space-y-4">
    <h2 class="text-2xl font-bold text-gray-800 dark:text-gray-200">RadzenCheckBox Demo (Blazor)</h2>
    <p class="text-gray-600 dark:text-gray-400">
        This example demonstrates using RadzenCheckBox with a custom data structure in Blazor.
    </p>

    <div class="space-y-2">
        @foreach (var item in items)
        {
            <div class="flex items-center gap-2">
                <RadzenCheckBox @bind-Value="item.IsSelected"
                                @onchange="@((bool value) => HandleChange(value, item))"
                                Name="@($"item-{item.Id}")"
                                Class="mr-2" />
                <label for="@($"item-{item.Id}")" class="text-gray-700 dark:text-gray-300">@item.Text</label>
            </div>
        }
    </div>
     <RadzenButton Click="LogSelectedItems" Text="Get Selected Items" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded" />
</div>

@* Code block for component logic *@
@code {
    private List<CheckboxItem> items = new List<CheckboxItem>
    {
        new CheckboxItem { Id = 1, Text = "Item 1", IsSelected = false },
        new CheckboxItem { Id = 2, Text = "Item 2", IsSelected = true },
        new CheckboxItem { Id = 3, Text = "Item 3", IsSelected = false },
    };

    private void HandleChange(bool value, CheckboxItem item)
    {
        // Find the item in the list and update its IsSelected property
        var itemToUpdate = items.FirstOrDefault(i => i.Id == item.Id);
        if (itemToUpdate != null)
        {
            itemToUpdate.IsSelected = value;
        }
    }

    private void LogSelectedItems()
    {
        var selectedItems = items.Where(item => item.IsSelected).ToList();
        Console.WriteLine("Selected Items:");
        foreach (var selectedItem in selectedItems)
        {
            Console.WriteLine($"- {selectedItem.Text}");
        }
        //Use JS interop to display an alert.
        string message = $"Selected Items: {string.Join(", ", selectedItems.Select(i => i.Text))}";
        await JSRuntime.InvokeVoidAsync("alert", message);
    }
}

===========================================================================================================
using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace YourNamespace.Models
{
    [Table("CIFVTPAD")]
    public class Cifvtpad
    {
        [Key]
        [Column("TPAD ACCT_NUM")]
        [StringLength(16)]
        public string TpadAcctNum { get; set; }

        [Required]
        [Column("TPAD_PERIOD_ID")]
        [StringLength(5)]
        public string TpadPeriodId { get; set; }

        [Required]
        [Column("TPAD PERIOD_DATE")]
        public DateTime TpadPeriodDate { get; set; }

        [Required]
        [Column("TPAD_EXCEPTION_SET")]
        [StringLength(8)]
        public string TpadExceptionSet { get; set; }

        [Required]
        [Column("TPAD_CHRG_CLASS")]
        [StringLength(2)]
        public string TpadChrgClass { get; set; }

        [Required]
        [Column("TPAD_CR_RATE")]
        public decimal TpadCrRate { get; set; }

        [Required]
        [Column("TPAD_OD_RATE")]
        public decimal TpadOdRate { get; set; }

        [Required]
        [Column("TPAD_AVG_CURR_BAL")]
        public decimal TpadAvgCurrBal { get; set; }

        [Required]
        [Column("TPAD AVG_COLL_BAL")]
        public decimal TpadAvgCollBal { get; set; }

        [Required]
        [Column("TPAD_POS_COLL_BAL")]
        public decimal TpadPosCollBal { get; set; }

        [Required]
        [Column("TPAD NEG COLL_BAL")]
        public decimal TpadNegCollBal { get; set; }

        [Required]
        [Column("TPAD_FREE_COLL_BAL")]
        public decimal TpadFreeCollBal { get; set; }

        [Required]
        [Column("TPAD RESERVE REQ")]
        public decimal TpadReserveReq { get; set; }

        [Required]
        [Column("TPAD TIMES OD")]
        public decimal TpadTimesOd { get; set; }

        [Required]
        [Column("TPAD_OD PREMIUM")]
        public decimal TpadOdPremium { get; set; }

        [Required]
        [Column("TPAD SRVC_RENDERED")]
        public decimal TpadSrvcRendered { get; set; }

        [Required]
        [Column("TPAD_PRFT_LOSS_AMT")]
        public decimal TpadPrftLossAmt { get; set; }

        [Required]
        [Column("TPAD FEES PAID")]
        public decimal TpadFeesPaid { get; set; }

        [Required]
        [Column("TPAD_THIRD PTY_CHG")]
        public decimal TpadThirdPtyChg { get; set; }
    }
}

===========================================================================================================

using Microsoft.EntityFrameworkCore;
using YourNamespace;

var builder = WebApplication.CreateBuilder(args);

// Add DbContext with connection pooling
builder.Services.AddDbContextPool<DB3Entities>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

var app = builder.Build();

// Optional: Add app configuration here

app.Run();

=================================
{
  "ConnectionStrings": {
    "DefaultConnection": "Server=your_server;Database=your_database;User Id=your_user;Password=your_password;"
  }
}
=================================
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace YourNamespace
{
    [Table("CIFVTBAD")]
    public class Cifvtbad
    {
        [Key]
        [Column("TBAD ACCT NUM")]
        [StringLength(16)]
        public string TbadAcctNum { get; set; }

        [Required]
        [Column("TBAD MAST ACCT NUM")]
        [StringLength(16)]
        public string TbadMastAcctNum { get; set; }

        [Required]
        [Column("TBAD PRODUCT TYPE")]
        [StringLength(2)]
        public string TbadProductType { get; set; }

        [Required]
        [Column("TBAD STATUS")]
        [StringLength(2)]
        public string TbadStatus { get; set; }

        [Required]
        [Column("TBAD DATE OPN CLS")]
        [StringLength(7)]
        public string TbadDateOpnCls { get; set; }

        [Required]
        [Column("TBAD SHORT NAME")]
        [StringLength(25)]
        public string TbadShortName { get; set; }

        [Required]
        [Column("TBAD COST CENTER")]
        [StringLength(7)]
        public string TbadCostCenter { get; set; }

        [Required]
        [Column("TBAD_BRANCH")]
        [StringLength(5)]
        public string TbadBranch { get; set; }

        [Required]
        [Column("TBAD OFFICER")]
        [StringLength(5)]
        public string TbadOfficer { get; set; }

        [Required]
        [Column("TBAD ANAL SCHD")]
        [StringLength(2)]
        public string TbadAnalSchd { get; set; }

        [Required]
        [Column("TBAD_PACKAGE CODE")]
        [StringLength(6)]
        public string TbadPackageCode { get; set; }
    }

    public class DB3Entities : DbContext
    {
        public DB3Entities(DbContextOptions<DB3Entities> options) : base(options)
        {
        }

        public DbSet<Cifvtbad> Cifvtbad { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Cifvtbad>()
                .HasKey(e => e.TbadAcctNum); // Assuming it's the primary key

            base.OnModelCreating(modelBuilder);
        }
    }
}

=================================

=================================

=================================

=================================

=================================

=================================

=================================

=================================

=================================

=================================

=================================

===========================================================================================================
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Centered Label in Div</title>
  <style>
    .centered-container {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 150px;
      border: 1px solid #ccc;
      background-color: #f9f9f9;
      margin: 50px auto;
      width: 50%;
      border-radius: 8px;
    }

    .centered-container label {
      font-size: 16px;
      font-weight: bold;
    }
  </style>
</head>
<body>

  <div class="centered-container">
    <label for="example">This is a centered label</label>
  </div>

</body>
</html>

===========================================================================================================
<RadzenDataGrid TItem="AdjustedAnalysisDataModel" Data="@gridData" AllowPaging="true">
    <Columns>
        <RadzenDataGridColumnGroup Title="Customer Info">
            <Columns>
                <RadzenDataGridColumn TItem="AdjustedAnalysisDataModel" Property="CustomerName" Title="Customer Name" />
                <RadzenDataGridColumn TItem="AdjustedAnalysisDataModel" Property="NoOfAccount" Title="No Of Accounts" />
            </Columns>
        </RadzenDataGridColumnGroup>

        <RadzenDataGridColumnGroup Title="Balances">
            <Columns>
                <RadzenDataGridColumn TItem="AdjustedAnalysisDataModel" Property="AvgLedgerBalance" Title="Avg Ledger Balance" />
                <RadzenDataGridColumn TItem="AdjustedAnalysisDataModel" Property="AvgCollectedBalance" Title="Avg Collected Balance" />
            </Columns>
        </RadzenDataGridColumnGroup>

        <RadzenDataGridColumnGroup Title="ECR Info">
            <Columns>
                <RadzenDataGridColumn TItem="AdjustedAnalysisDataModel" Property="Ecr" Title="ECR" />
                <RadzenDataGridColumn TItem="AdjustedAnalysisDataModel" Property="NegativeCollectedRate" Title="Negative Collected Rate" />
            </Columns>
        </RadzenDataGridColumnGroup>
    </Columns>
</RadzenDataGrid>

===========================================================================================================
void OnExceptionSetNameChanged(object value, AdjustedAnalysisDataModel data)
{
    var selected = value?.ToString();
    data.ExceptionSetName = selected;

    // You can set related fields here
    data.ExceptionExpiration = DateTime.Now.AddDays(30).ToString("yyyy-MM-dd"); // Example logic
}
===========================================================================================================
public class ExceptionName
{
    public string Name { get; set; }
}

public List<ExceptionName> ExceptionNames = new()
{
    new ExceptionName { Name = "Praveen1" },
    new ExceptionName { Name = "Praveen2" },
    new ExceptionName { Name = "Praveen3" }
};


===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
<RadzenDataGridColumn TItem="AdjustedAnalysisDataModel" Property="ExceptionSetName" Title="Exception Set Name">
    <Template Context="data">
        <RadzenDropDown 
            Value="@data.ExceptionSetName"
            Data="@ExceptionNames" 
            TextProperty="Name" 
            ValueProperty="Name" 
            Style="width:100%" 
            Change="@((args) => OnExceptionSetNameChanged(args, data))" />
    </Template>
</RadzenDataGridColumn>


===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
===========================================================================================================
@page "/adjusted-analysis"
@using System.Linq
@using System.Collections.Generic

@code {
    public class AdjustedAnalysisDataModel
    {
        public decimal CustomerName { get; set; }
        public decimal NoOfAccount { get; set; }
        public string Keyaccounts { get; set; }
        public bool Include { get; set; }
        public int ID { get; set; }
        public string BillingMethod { get; set; }
        public decimal Ecr { get; set; }
        public decimal NegativeCollectedRate { get; set; }
        public decimal PostiveCollectedBalance { get; set; }
        public decimal NegativeCollectedBalance { get; set; }
        public decimal AvgLedgerBalance { get; set; }
        public decimal AvgCollectedBalance { get; set; }
        public string ExceptionSetName { get; set; }
        public string ExceptionExpiration { get; set; }
        public bool UseStandardEcr { get; set; }
        public bool EcrOnlyChange { get; set; }
        public string RateChangeType { get; set; }
    }

    List<AdjustedAnalysisDataModel> AdjustedData = Enumerable.Range(1, 5).Select(i => new AdjustedAnalysisDataModel
    {
        CustomerName = 1000 + i,
        NoOfAccount = 10 + i,
        Keyaccounts = $"Key{i}",
        Include = i % 2 == 0,
        ID = 100823,
        BillingMethod = billingMethods[i % billingMethods.Count],
        Ecr = 0.25m + i,
        NegativeCollectedRate = 0.1m * i,
        PostiveCollectedBalance = 2000 + i,
        NegativeCollectedBalance = 500 + i,
        AvgLedgerBalance = 1500 + i,
        AvgCollectedBalance = 1600 + i,
        ExceptionSetName = $"Exception{i}",
        ExceptionExpiration = DateTime.Now.AddDays(i).ToString("yyyy-MM-dd"),
        UseStandardEcr = i % 2 == 0,
        EcrOnlyChange = i % 3 == 0,
        RateChangeType = rateChangeTypes[i % rateChangeTypes.Count]
    }).ToList();

    List<string> billingMethods = new()
    {
        "Monthly, Direct Debit", "Monthly, Billed", "Quarterly, Direct Debit",
        "Quarterly, Billed", "Semi, Direct Debit", "Semi, Billed",
        "Yearly, Direct Debit", "Yearly, Billed", "Waived"
    };

    List<string> rateChangeTypes = new() { "NC", "ADD", "CHG", "RMV" };
}

<RadzenDataGrid TItem="AdjustedAnalysisDataModel" Data="@AdjustedData" ShowPagingSummary="true" PageSize="5" AllowFiltering="true" AllowSorting="true" AllowPaging="true" class="w-full">
    <Columns>
        <RadzenDataGridColumn TItem="AdjustedAnalysisDataModel" Width="50px">
            <Template Context="data">
                <RadzenCheckBox TriState="false" Value="@data.Include" />
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="AdjustedAnalysisDataModel" Property="Keyaccounts" Title="Key Account" />
        <RadzenDataGridColumn TItem="AdjustedAnalysisDataModel" Property="CustomerName" Title="Customer Name" />

        <RadzenDataGridColumn TItem="AdjustedAnalysisDataModel" Property="RateChangeType" Title="Rate Change Type">
            <EditTemplate Context="data">
                <RadzenDropDown @bind-Value="data.RateChangeType" Data="@rateChangeTypes" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="AdjustedAnalysisDataModel" Property="BillingMethod" Title="Billing Method">
            <EditTemplate Context="data">
                <RadzenDropDown @bind-Value="data.BillingMethod" Data="@billingMethods" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="AdjustedAnalysisDataModel" Property="Ecr" Title="ECR">
            <EditTemplate Context="data">
                <RadzenTextBox @bind-Value="data.Ecr" Style="width:100%" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="AdjustedAnalysisDataModel" Property="NegativeCollectedRate" Title="Neg Rate">
            <EditTemplate Context="data">
                <RadzenTextBox @bind-Value="data.NegativeCollectedRate" Style="width:100%" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="AdjustedAnalysisDataModel" Property="AvgLedgerBalance" Title="Avg Ledger Balance">
            <EditTemplate Context="data">
                <RadzenTextBox @bind-Value="data.AvgLedgerBalance" Style="width:100%" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="AdjustedAnalysisDataModel" Property="AvgCollectedBalance" Title="Avg Collected Balance">
            <EditTemplate Context="data">
                <RadzenTextBox @bind-Value="data.AvgCollectedBalance" Style="width:100%" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="AdjustedAnalysisDataModel" Property="PostiveCollectedBalance" Title="Pos Collected Balance">
            <EditTemplate Context="data">
                <RadzenTextBox @bind-Value="data.PostiveCollectedBalance" Style="width:100%" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="AdjustedAnalysisDataModel" Property="NegativeCollectedBalance" Title="Neg Collected Balance">
            <EditTemplate Context="data">
                <RadzenTextBox @bind-Value="data.NegativeCollectedBalance" Style="width:100%" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="AdjustedAnalysisDataModel" Property="ExceptionSetName" Title="Exception Set Name">
            <EditTemplate Context="data">
                <RadzenTextBox @bind-Value="data.ExceptionSetName" Style="width:100%" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="AdjustedAnalysisDataModel" Property="ExceptionExpiration" Title="Exception Expiration">
            <EditTemplate Context="data">
                <RadzenTextBox @bind-Value="data.ExceptionExpiration" ReadOnly="true" Style="width:100%" />
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>
