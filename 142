
============================================================================================================================
============================================================================================================================
============================================================================================================================
============================================================================================================================
using System;
using System.Collections.Generic;
using System.Linq;

public class ElementClassificationModel
{
    public string Element { get; set; }
    public string PRName { get; set; }
    public string LongName { get; set; }
    public string AfpCode { get; set; }
    public decimal StandardPrice { get; set; }
    public int Tier1Volume { get; set; }
    public decimal Tier1Price { get; set; }
    public int Tier2Volume { get; set; }
    public int Tier2Price { get; set; }
    public decimal Tier3Price { get; set; }
    public decimal Cost { get; set; }
    public int ComaignId { get; set; }
    public bool AlwaysShow { get; set; }
    public string PcdElement { get; set; }
    public decimal CompPrice { get; set; }
    public decimal UnitPrice { get; set; }
    public int Volume { get; set; }
    public int ElementID { get; set; }
    public char ChargeClass { get; set; }
    public char TieredType { get; set; }
    public int Tier { get; set; }
    public string KeyAccount { get; set; }
    public int AnalysisId { get; set; }
    public string BillingMethod { get; set; }
    public string Description { get; set; }
    public bool SetupFree { get; set; }
    public int ModelId { get; set; } // For filtering
}

public class Program
{
    public static void Main()
    {
        // Lambda to return 5 dummy rows for modelId = 100823
        Func<List<ElementClassificationModel>> getDummyData = () =>
            Enumerable.Range(1, 5).Select(i => new ElementClassificationModel
            {
                Element = $"Element-{i}",
                PRName = $"PRName-{i}",
                LongName = $"LongName-{i}",
                AfpCode = $"AFP-{i}",
                StandardPrice = 99.5m + i,
                Tier1Volume = 100 * i,
                Tier1Price = 50.5m + i,
                Tier2Volume = 200 * i,
                Tier2Price = 75 + i,
                Tier3Price = 125.5m + i,
                Cost = 30.25m + i,
                ComaignId = i,
                AlwaysShow = i % 2 == 0,
                PcdElement = $"PCD-{i}",
                CompPrice = 88.5m + i,
                UnitPrice = 45.75m + i,
                Volume = 1000 * i,
                ElementID = i,
                ChargeClass = 'C',
                TieredType = 'T',
                Tier = i,
                KeyAccount = $"Key-{i}",
                AnalysisId = 1000 + i,
                BillingMethod = "Monthly",
                Description = $"Sample description {i}",
                SetupFree = i % 2 != 0,
                ModelId = 100823
            }).ToList();

        // Fetch and display
        var dummyList = getDummyData();

        foreach (var item in dummyList)
        {
            Console.WriteLine($"{item.Element} | {item.PRName} | ModelId: {item.ModelId}");
        }
    }
}

============================================================================================================================
<RadzenGrid Data="@employeeList" TItem="Employee" ColumnWidth="200px" ShowPagingSummary="false">
    <Columns>
        <RadzenGridColumn TItem="Employee" Title="Employee Name">
            <Template Context="emp">
                <a href="#" @onclick="() => OnEmployeeClick(emp)" style="color: blue; text-decoration: underline;">
                    @emp.EmployeeName
                </a>
            </Template>
        </RadzenGridColumn>

        <RadzenGridColumn TItem="Employee" Property="Age" Title="Age" />
        <RadzenGridColumn TItem="Employee" Property="Salary" Title="Salary" />
    </Columns>
</RadzenGrid>
 private void OnEmployeeClick(Employee emp)
    {
        // Handle click event (e.g., show a dialog, navigate, etc.)
        Console.WriteLine($"Clicked: {emp.EmployeeName}");
    }
============================================================================================================================

var reportNames = new List<string>
{
    "All Products",
    "Exception Pricing"
}
.Concat(
    _context.ElementClassification
        .Select(e => e.PRReportName)
        .Distinct()
)
.OrderBy(name => name)
.ToList();

int targetModelId = 101;
string newApprovalDoc = "Approved_Doc_123.pdf";

await _context.ModelAnalysisData
    .Where(m => m.ModelId == targetModelId)
    .ExecuteUpdateAsync(setters => setters
        .SetProperty(m => m.ApprovalDoc, m => newApprovalDoc));



============================================================================================================================
============================================================================================================================
============================================================================================================================
============================================================================================================================
============================================================================================================================
============================================================================================================================
===========================================
====================================
using (var db = new YourDbContext())
{
    var newRecord = new AdjustedElementData
    {
        ModelId = modelId,
        AnalysisId = analysisId,
        Volume = volume,
        UnitPrice = unit_price,
        ElementId = elementId,
        CompPrice = compPrice,
        ChargeClass = chargeClass,
        StandardPrice = standardPrice,
        Tier = tier,
        CampaignId = campaignId,
        PcdElement = pcdElement
    };

    db.AdjustedElementDataSet.Add(newRecord);
    db.SaveChanges();
}


================================================================================================================
================================================================================================================
================================================================================================================
@using Radzen;
@using Radzen.Blazor;

<RadzenCheckBoxList @bind-Value="@selectedValues" TValue="int" Data="@options" TextProperty="Text" ValueProperty="Value" />

<ChildComponent SelectedValuesChanged="HandleSelectedValuesChanged" />

@code {
    List<int> selectedValues = new List<int>();

    List<Option> options = new List<Option>()
    {
        new Option { Text = "Option 1", Value = 1 },
        new Option { Text = "Option 2", Value = 2 },
        new Option { Text = "Option 3", Value = 3 }
    };

    public class Option
    {
        public string Text { get; set; }
        public int Value { get; set; }
    }

    public void HandleSelectedValuesChanged(List<int> values)
    {
        Console.WriteLine($"Values changed in parent: {string.Join(",", values)}");
    }
}


====================================================================================================================================
====================================================================================================================================
====================================================================================================================================
====================================================================================================================================
====================================================================================================================================
====================================================================================================================================
@using Radzen
@using Radzen.Blazor

<RadzenCheckBoxList @bind-Value="@selectedValues" TValue="int" Data="@options" TextProperty="Text" ValueProperty="Value" />

@code {
    List<int> selectedValues = new List<int>();

    List<Option> options = new List<Option>()
    {
        new Option { Text = "Option 1", Value = 1 },
        new Option { Text = "Option 2", Value = 2 },
        new Option { Text = "Option 3", Value = 3 }
    };

    public class Option
    {
        public string Text { get; set; }
        public int Value { get; set; }
    }
}





<RadzenCheckBoxList TValue="List<string>" 
                    Data="@options" 
                    @bind-Value="@selectedValues" 
                    TextProperty="Text" 
                    ValueProperty="Value" 
                    Style="width: 300px;" />

@code {
    // Class to hold each item
    public class OptionItem
    {
        public string Text { get; set; }
        public string Value { get; set; }
    }

    // List of options
    List<OptionItem> options = new()
    {
        new OptionItem { Text = "Option 1", Value = "1" },
        new OptionItem { Text = "Option 2", Value = "2" },
        new OptionItem { Text = "Option 3", Value = "3" }
    };

    // Selected values (bound to component)
    List<string> selectedValues = new();
}

