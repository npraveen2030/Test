int targetModelId = 101;
string newApprovalDoc = "Approved_Doc_123.pdf";

await _context.ModelAnalysisData
    .Where(m => m.ModelId == targetModelId)
    .ExecuteUpdateAsync(setters => setters
        .SetProperty(m => m.ApprovalDoc, m => newApprovalDoc));



============================================================================================================================
============================================================================================================================
============================================================================================================================
============================================================================================================================
============================================================================================================================
============================================================================================================================
===========================================
====================================
using (var db = new YourDbContext())
{
    var newRecord = new AdjustedElementData
    {
        ModelId = modelId,
        AnalysisId = analysisId,
        Volume = volume,
        UnitPrice = unit_price,
        ElementId = elementId,
        CompPrice = compPrice,
        ChargeClass = chargeClass,
        StandardPrice = standardPrice,
        Tier = tier,
        CampaignId = campaignId,
        PcdElement = pcdElement
    };

    db.AdjustedElementDataSet.Add(newRecord);
    db.SaveChanges();
}


================================================================================================================
================================================================================================================
================================================================================================================
@using Radzen;
@using Radzen.Blazor;

<RadzenCheckBoxList @bind-Value="@selectedValues" TValue="int" Data="@options" TextProperty="Text" ValueProperty="Value" />

<ChildComponent SelectedValuesChanged="HandleSelectedValuesChanged" />

@code {
    List<int> selectedValues = new List<int>();

    List<Option> options = new List<Option>()
    {
        new Option { Text = "Option 1", Value = 1 },
        new Option { Text = "Option 2", Value = 2 },
        new Option { Text = "Option 3", Value = 3 }
    };

    public class Option
    {
        public string Text { get; set; }
        public int Value { get; set; }
    }

    public void HandleSelectedValuesChanged(List<int> values)
    {
        Console.WriteLine($"Values changed in parent: {string.Join(",", values)}");
    }
}


====================================================================================================================================
====================================================================================================================================
====================================================================================================================================
====================================================================================================================================
====================================================================================================================================
====================================================================================================================================
@using Radzen
@using Radzen.Blazor

<RadzenCheckBoxList @bind-Value="@selectedValues" TValue="int" Data="@options" TextProperty="Text" ValueProperty="Value" />

@code {
    List<int> selectedValues = new List<int>();

    List<Option> options = new List<Option>()
    {
        new Option { Text = "Option 1", Value = 1 },
        new Option { Text = "Option 2", Value = 2 },
        new Option { Text = "Option 3", Value = 3 }
    };

    public class Option
    {
        public string Text { get; set; }
        public int Value { get; set; }
    }
}





<RadzenCheckBoxList TValue="List<string>" 
                    Data="@options" 
                    @bind-Value="@selectedValues" 
                    TextProperty="Text" 
                    ValueProperty="Value" 
                    Style="width: 300px;" />

@code {
    // Class to hold each item
    public class OptionItem
    {
        public string Text { get; set; }
        public string Value { get; set; }
    }

    // List of options
    List<OptionItem> options = new()
    {
        new OptionItem { Text = "Option 1", Value = "1" },
        new OptionItem { Text = "Option 2", Value = "2" },
        new OptionItem { Text = "Option 3", Value = "3" }
    };

    // Selected values (bound to component)
    List<string> selectedValues = new();
}

