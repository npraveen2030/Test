DECLARE @i INT = 1
DECLARE @max INT
DECLARE @insertScript NVARCHAR(MAX) = ''

-- Get the total number of records
SELECT @max = COUNT(*) FROM EMPLOYEE

-- Create a temporary table with row numbers
WITH EmployeeData AS (
    SELECT ROW_NUMBER() OVER (ORDER BY EmployeeID) AS RowNum, * 
    FROM EMPLOYEE
)
SELECT * INTO #TempEmployee FROM EmployeeData

-- Get column names dynamically
DECLARE @columns NVARCHAR(MAX)

SELECT @columns = STUFF(
    (SELECT ', ' + QUOTENAME(COLUMN_NAME)
     FROM INFORMATION_SCHEMA.COLUMNS
     WHERE TABLE_NAME = 'EMPLOYEE'
     FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 
    1, 2, '')

-- Loop through records
WHILE @i <= @max
BEGIN
    DECLARE @values NVARCHAR(MAX), @sql NVARCHAR(MAX)

    -- Extract row values dynamically
    SELECT @values = STUFF(
        (SELECT ', ' + '''' + CAST(Value AS NVARCHAR(MAX)) + ''''
         FROM (
             SELECT CAST(EmployeeID AS NVARCHAR(MAX)) AS Value FROM #TempEmployee WHERE RowNum = @i
             UNION ALL
             SELECT CAST(EmployeeName AS NVARCHAR(MAX)) FROM #TempEmployee WHERE RowNum = @i
             UNION ALL
             SELECT CAST(Designation AS NVARCHAR(MAX)) FROM #TempEmployee WHERE RowNum = @i
             -- Add more columns as needed
         ) AS DataValues
         FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'),
        1, 2, '')

    -- Generate INSERT statement
    SET @sql = 'INSERT INTO EMPLOYEE (' + @columns + ') VALUES (' + @values + ');'
    
    -- Store in script variable
    SET @insertScript = @insertScript + @sql + CHAR(13) + CHAR(10)

    -- Move to the next row
    SET @i = @i + 1
END

-- Print the result (Copy from SSMS and save in Notepad)
PRINT @insertScript
