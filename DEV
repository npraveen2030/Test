@inject DbContext _context
@using Radzen

<div class="pricing-container">
    <!-- First Row -->
    <div class="row">
        <div class="col">
            <label>Current Pricing Waived?</label>
            <RadzenDropDown @bind-Value="CurrentPricingWaived" Data="@(new List<string>{ "Yes", "No" })" />
        </div>

        <div class="col">
            <label>Contract Pricing</label>
            <RadzenDropDown @bind-Value="ContractPricing" Data="@(new List<string>{ "Yes", "No" })"
                            Change="@(args => ToggleDateControls())" />
        </div>

        @if (ContractPricing == "Yes")
        {
            <div class="col">
                <label>Start Date</label>
                <RadzenDatePicker @bind-Value="StartDate" />
            </div>

            <div class="col">
                <label>End Date</label>
                <RadzenDatePicker @bind-Value="EndDate" />
            </div>
        }

        <div class="col">
            <label>Use Standard ECR</label>
            <RadzenCheckBox @bind-Value="UseStandardEcr" />
        </div>
    </div>

    <!-- Second Row -->
    <div class="row">
        <div class="col">
            <label>Proposal Pricing Waived?</label>
            <RadzenDropDown @bind-Value="ProposalPricingWaived" Data="@(new List<string>{ "Yes", "No" })" />
        </div>

        <div class="col">
            <label>Campaign Pricing</label>
            <RadzenDropDown @bind-Value="SelectedCampaignId" Data="@campaignList"
                            TextProperty="CampaignName" ValueProperty="Id" />
        </div>
    </div>

    <!-- Update Button -->
    <div class="row">
        <RadzenButton Text="Update Balance and Pricing Information" Click="UpdatePricing" />
    </div>
</div>

@code {
    private string CurrentPricingWaived = "No";
    private string ContractPricing = "No";
    private DateTime? StartDate;
    private DateTime? EndDate;
    private bool UseStandardEcr = false;
    private string ProposalPricingWaived = "No";
    private int SelectedCampaignId;

    private List<Campaign> campaignList = new();

    protected override async Task OnInitializedAsync()
    {
        // Load campaigns from database
        campaignList = await _context.Campaigns.Join(_context.CampaignEcrs,
                                c => c.Id,
                                e => e.CampaignId,
                                (c, e) => new Campaign
                                {
                                    Id = c.Id,
                                    CampaignName = c.CampaignName,
                                    TierId = e.TierId,
                                    NCR = e.NCR,
                                    ECR = e.ECR,
                                    TierMinBalance = e.TierMinBalance,
                                    Message = e.Message ?? ""
                                }).ToListAsync();
    }

    private void ToggleDateControls()
    {
        if (ContractPricing == "No")
        {
            StartDate = null;
            EndDate = null;
        }
    }

    private async Task UpdatePricing()
    {
        // Implement save logic here (e.g., update database)
        await _context.SaveChangesAsync();
    }

    public class Campaign
    {
        public int Id { get; set; }
        public string CampaignName { get; set; }
        public int TierId { get; set; }
        public decimal NCR { get; set; }
        public decimal ECR { get; set; }
        public decimal TierMinBalance { get; set; }
        public string Message { get; set; }
    }
}
